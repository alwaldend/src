{
    "id": 1221924932,
    "status_display": "Accepted",
    "lang": "golang",
    "question_id": 79,
    "title_slug": "word-search",
    "code": "func exist(board [][]byte, word string) bool {\n    if nLetters := len(board) * len(board[0]); nLetters \u003c len(word) {\n        return false\n    }\n\n    for i := range board {\n        for j := range board[i] {\n            if dfs(i, j, 0, board, word, make(map[pair]struct{})) {\n                return true\n            }\n        }\n    }\n\n    return false\n}\n\ntype pair struct {\n    r, c int\n}\n\nfunc dfs(r, c, i int, board [][]byte, word string, visited map[pair]struct{}) bool {\n    if i == len(word) {\n        return true\n    }\n\n    inBounds := r \u003e= 0 \u0026\u0026 r \u003c len(board) \u0026\u0026 c \u003e= 0 \u0026\u0026 c \u003c len(board[0])\n    if _, ok := visited[pair{r, c}]; !inBounds || ok || word[i] != board[r][c] {\n        return false\n    }\n\n    visited[pair{r, c}] = struct{}{}\n\n    up := dfs(r+1, c, i+1, board, word, visited)\n    down := dfs(r-1, c, i+1, board, word, visited)\n    right := dfs(r, c+1, i+1, board, word, visited)\n    left := dfs(r, c-1, i+1, board, word, visited)\n\n    delete(visited, pair{r, c})\n\n    return up || down || right || left\n}\n",
    "title": "Word Search",
    "url": "/submissions/detail/1221924932/",
    "lang_name": "Go",
    "time": "1 year, 1 month",
    "timestamp": 1712130774,
    "status": 10,
    "runtime": "953 ms",
    "is_pending": "Not Pending",
    "memory": "3 MB",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "flag_type": 1
}