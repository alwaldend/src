{
    "id": 1091201914,
    "status_display": "Accepted",
    "lang": "golang",
    "question_id": 502,
    "title_slug": "ipo",
    "code": "type Project struct {\n    profit, capital int\n}\n\ntype IntHeap []int\nfunc (h IntHeap) Len() int           { return len(h) }\nfunc (h IntHeap) Less(i, j int) bool { return h[i] \u003e h[j] }\nfunc (h IntHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }\nfunc (h *IntHeap) Push(x interface{}) { *h = append(*h, x.(int)) }\nfunc (h *IntHeap) Pop() interface{} {\n\told := *h\n\tn := len(old)\n\tx := old[n-1]\n\t*h = old[0 : n-1]\n\treturn x\n}\n\nfunc findMaximizedCapital(k int, w int, profits []int, capital []int) int {\n    n := len(profits)\n    projects := make([]Project, n)\n    for i := range profits {\n        projects[i] = Project{profits[i], capital[i]}\n    }\n    sort.Slice(projects, func (i, j int) bool {\n        return projects[i].capital \u003c projects[j].capital\n    })\n    \n    q := \u0026IntHeap{}\n    heap.Init(q)\n\n    ptr := 0\n    for i := 0; i \u003c k; i++ {\n        for ptr \u003c n \u0026\u0026 projects[ptr].capital \u003c= w {\n            heap.Push(q, projects[ptr].profit)\n            ptr++\n        }\n        if q.Len() == 0 {\n            break\n        }\n        w += heap.Pop(q).(int)\n    }\n    return w\n}",
    "title": "IPO",
    "url": "/submissions/detail/1091201914/",
    "lang_name": "Go",
    "time": "1 year, 6 months",
    "timestamp": 1699093846,
    "status": 10,
    "runtime": "155 ms",
    "is_pending": "Not Pending",
    "memory": "10.8 MB",
    "compare_result": "11111111111111111111111111111111111",
    "flag_type": 1
}