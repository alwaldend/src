{
    "id": 1090575563,
    "status_display": "Accepted",
    "lang": "golang",
    "question_id": 230,
    "title_slug": "kth-smallest-element-in-a-bst",
    "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc kthSmallest(root *TreeNode, k int) int {\n    heap := binaryheap.NewWithIntComparator()\n    queue := []*TreeNode{root}\n\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            node := queue[i]\n            if node == nil {\n                continue\n            }\n            heap.Push(node.Val)\n            queue = append(queue, node.Left, node.Right)\n        }\n        queue = queue[length:]\n    }\n    var answer any\n    for i := 0; i \u003c k; i++ {\n        answer, _ = heap.Pop()\n    }\n    return answer.(int)\n}\n",
    "title": "Kth Smallest Element in a BST",
    "url": "/submissions/detail/1090575563/",
    "lang_name": "Go",
    "time": "1 year, 6 months",
    "timestamp": 1699014027,
    "status": 10,
    "runtime": "12 ms",
    "is_pending": "Not Pending",
    "memory": "6.8 MB",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "flag_type": 1
}