{
    "id": 1089106155,
    "status_display": "Accepted",
    "lang": "golang",
    "question_id": 129,
    "title_slug": "sum-root-to-leaf-numbers",
    "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\ntype queueItem struct {\n    node *TreeNode\n    sum int\n}\nfunc sumNumbers(root *TreeNode) int {\n    if root == nil {\n        return 0\n    }\n    queue := []queueItem{queueItem{root, 0}}\n    sum := 0\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            item := queue[i]\n            if item.node == nil {\n                continue\n            }\n            left, right, newVal := item.node.Left, item.node.Right, item.node.Val + item.sum * 10\n            if left == nil \u0026\u0026 right == nil {\n                sum += newVal\n            } else {\n                queue = append(queue, queueItem{left, newVal}, queueItem{right, newVal})\n            }\n        }\n        queue = queue[length:]\n    }\n    return sum\n}",
    "title": "Sum Root to Leaf Numbers",
    "url": "/submissions/detail/1089106155/",
    "lang_name": "Go",
    "time": "1 year, 8 months",
    "timestamp": 1698843559,
    "status": 10,
    "runtime": "0 ms",
    "is_pending": "Not Pending",
    "memory": "2.3 MB",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "flag_type": 1
}