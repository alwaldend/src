{
    "id": 1188569303,
    "status_display": "Accepted",
    "lang": "golang",
    "question_id": 513,
    "title_slug": "find-bottom-left-tree-value",
    "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findBottomLeftValue(root *TreeNode) int {\n    _, val := getBottomLeft(root)\n    return val\n}\n\nfunc getBottomLeft(root *TreeNode) (int, int) {\n    left, right := root.Left, root.Right\n    if right == nil \u0026\u0026 left == nil {\n        return 0, root.Val\n    }\n    if right == nil {\n        depth, val := getBottomLeft(root.Left)\n        return 1 + depth, val\n    }\n    if left == nil {\n        depth, val := getBottomLeft(root.Right)\n        return 1 + depth, val\n    }\n    leftDepth, leftVal := getBottomLeft(root.Left)\n    rightDepth, rightVal := getBottomLeft(root.Right)\n    if rightDepth \u003e leftDepth {\n        return 1 + rightDepth, rightVal\n    }\n    return 1 + leftDepth, leftVal\n}",
    "title": "Find Bottom Left Tree Value",
    "url": "/submissions/detail/1188569303/",
    "lang_name": "Go",
    "time": "1 year, 5 months",
    "timestamp": 1709112673,
    "status": 10,
    "runtime": "2 ms",
    "is_pending": "Not Pending",
    "memory": "5.8 MB",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111",
    "flag_type": 1
}