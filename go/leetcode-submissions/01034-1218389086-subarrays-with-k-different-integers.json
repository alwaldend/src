{
    "id": 1218389086,
    "status_display": "Accepted",
    "lang": "golang",
    "question_id": 1034,
    "title_slug": "subarrays-with-k-different-integers",
    "code": "func subarraysWithAtMostKDistinct(nums []int, k int) int {\n    if k == 0 {\n        return 0\n    }\n\n    countOccurrence := make(map[int]int)\n    differentIntegers := 0\n    left := 0\n    result := 0\n\n    for right := 0; right \u003c len(nums); right++ {\n        countOccurrence[nums[right]]++\n        if countOccurrence[nums[right]] == 1 {\n            differentIntegers++\n        }\n\n        for differentIntegers \u003e k {\n            countOccurrence[nums[left]]--\n            if countOccurrence[nums[left]] == 0 {\n                differentIntegers--\n            }\n            left++\n        }\n\n        result += right - left + 1\n    }\n    return result\n}\n\nfunc subarraysWithKDistinct(nums []int, k int) int {\n    return subarraysWithAtMostKDistinct(nums, k) - subarraysWithAtMostKDistinct(nums, k-1)\n}",
    "title": "Subarrays with K Different Integers",
    "url": "/submissions/detail/1218389086/",
    "lang_name": "Go",
    "time": "1 year, 1 month",
    "timestamp": 1711815887,
    "status": 10,
    "runtime": "61 ms",
    "is_pending": "Not Pending",
    "memory": "7.3 MB",
    "compare_result": "1111111111111111111111111111111111111111111111111111111",
    "flag_type": 1
}