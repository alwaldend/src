[[Submissions]]
  Id = 1238850894
  StatusDisplay = "Accepted"
  Lang = "golang"
  QuestionId = 2121
  TitleSlug = "find-if-path-exists-in-graph"
  Code = "type UnionFind struct {\n    parent []int\n    rank   []int\n}\n\nfunc NewUnionFind(n int) *UnionFind {\n    parent := make([]int, n)\n    rank := make([]int, n)\n    for i := 0; i < n; i++ {\n        parent[i] = i\n    }\n    return &UnionFind{parent, rank}\n}\n\nfunc (uf *UnionFind) Find(u int) int {\n    if uf.parent[u] != u {\n        uf.parent[u] = uf.Find(uf.parent[u])\n    }\n    return uf.parent[u]\n}\n\nfunc (uf *UnionFind) UnionByRank(u, v int) {\n    i := uf.Find(u)\n    j := uf.Find(v)\n    if i == j {\n        return\n    }\n    if uf.rank[i] < uf.rank[j] {\n        uf.parent[i] = j\n    } else if uf.rank[i] > uf.rank[j] {\n        uf.parent[j] = i\n    } else {\n        uf.parent[i] = j\n        uf.rank[j]++\n    }\n}\n\nfunc validPath(n int, edges [][]int, source int, destination int) bool {\n    uf := NewUnionFind(n)\n    for _, edge := range edges {\n        u, v := edge[0], edge[1]\n        uf.UnionByRank(u, v)\n    }\n    return uf.Find(source) == uf.Find(destination)\n}\n"
  Title = "Find if Path Exists in Graph"
  Url = "/submissions/detail/1238850894/"
  LangName = "Go"
  Timestamp = 1713771320
  Status = 10
  Runtime = "197 ms"
  IsPending = "Not Pending"
  Memory = "33.6 MB"
  CompareResult = "111111111111111111111111111111"
  HasNotes = false
  FlagType = 1
