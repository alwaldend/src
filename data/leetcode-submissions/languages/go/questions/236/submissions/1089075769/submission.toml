[[Submissions]]
  Id = 1089075769
  StatusDisplay = "Accepted"
  Lang = "golang"
  QuestionId = 236
  TitleSlug = "lowest-common-ancestor-of-a-binary-tree"
  Code = "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\nfunc lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\n    isAncestorMap := map[int][2]bool{}\n    dfs(root, p, q, isAncestorMap)\n    isAncestor := func (node *TreeNode) bool {\n        if node == nil {\n            return false\n        }\n        hasNodes := isAncestorMap[node.Val]\n        return hasNodes[0] && hasNodes[1]\n    }\n\n    for {\n        left, right := root.Left, root.Right\n        if isAncestor(left) {\n            root = left\n        } else if isAncestor(right) {\n            root = right\n        } else {\n            break\n        }\n    }\n    return root\n}\n\nfunc dfs(root, p, q *TreeNode, isAncestorMap map[int][2]bool) (bool, bool)  {\n    if root == nil {\n        return false, false\n    }\n    hasPLeft, hasQLeft := dfs(root.Left, p, q, isAncestorMap)\n    hasPRight, hasQRight := dfs(root.Right, p, q, isAncestorMap)\n    hasP, hasQ := hasPLeft || hasPRight, hasQLeft || hasQRight\n    if root == p {\n        hasP = true\n    }\n    if root == q {\n        hasQ = true\n    }\n    isAncestorMap[root.Val] = [2]bool{hasP, hasQ}\n    return hasP, hasQ\n}"
  Title = "Lowest Common Ancestor of a Binary Tree"
  Url = "/submissions/detail/1089075769/"
  LangName = "Go"
  Timestamp = 1698840005
  Status = 10
  Runtime = "15 ms"
  IsPending = "Not Pending"
  Memory = "8.1 MB"
  CompareResult = "1111111111111111111111111111111"
  HasNotes = false
  FlagType = 1
