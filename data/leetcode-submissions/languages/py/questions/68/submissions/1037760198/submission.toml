[[Submissions]]
  Id = 1037760198
  StatusDisplay = "Accepted"
  Lang = "python3"
  QuestionId = 68
  TitleSlug = "text-justification"
  Code = "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        words_count = len(words)\n        \n        def get_line(word_idx: int) -> Tuple[List[str], int]:\n            line = []\n            line_length = 0\n\n            for i in range(word_idx, words_count):\n                word = words[i]\n                word_length = len(word)\n                if line_length + word_length > maxWidth:\n                    break\n\n                line.append(word)\n                line_length += word_length + 1 \n\n            return line, line_length\n        \n        def create_line(line: List[str], line_length: int, word_idx: int) -> str:\n            base_length = line_length - 1\n            extra_spaces = maxWidth - base_length\n\n            if len(line) == 1 or word_idx == words_count:\n                return \" \".join(line) + \" \" * extra_spaces\n\n            word_count = len(line) - 1\n            spaces_per_word = extra_spaces // word_count\n            needs_extra_space = extra_spaces % word_count\n\n            for j in range(needs_extra_space):\n                line[j] += \" \"\n\n            for j in range(word_count):\n                line[j] += \" \" * spaces_per_word\n\n            return \" \".join(line)\n\n        result = []\n        i = 0\n        while i < words_count:\n            line, line_length = get_line(i)\n            i += len(line)\n            result.append(create_line(line, line_length, i))\n\n        return result"
  Title = "Text Justification"
  Url = "/submissions/detail/1037760198/"
  LangName = "Python3"
  Timestamp = 1693582877
  Status = 10
  Runtime = "46 ms"
  IsPending = "Not Pending"
  Memory = "16.4 MB"
  CompareResult = "11111111111111111111111111111"
  HasNotes = false
  FlagType = 1
