[[Submissions]]
  Id = 1604751266
  StatusDisplay = "Accepted"
  Lang = "python3"
  QuestionId = 3548
  TitleSlug = "find-the-count-of-good-integers"
  Code = "class Solution(object):\n    def __init__(self):\n        self.res = 0\n        self.visited = set()\n\n    def vectorToNumber(self, digits):\n        return int(''.join(map(str, digits)))\n\n    def totalPermutations(self, freqMap, total):\n        res = factorial(total)\n        for count in freqMap.values():\n            res //= factorial(count)\n        return res\n\n    def permsWithZero(self, freqMap, total):\n        if freqMap.get(0, 0) == 0:\n            return 0\n        freqMap[0] -= 1\n        res = factorial(total - 1)\n        for count in freqMap.values():\n            res //= factorial(count)\n        return res\n\n    def genPal(self, palin, left, right, divisor, total):\n        if left > right:\n            palinVal = self.vectorToNumber(palin)\n            if palinVal % divisor == 0:\n                freq = Counter(palin)\n                key = tuple(sorted(freq.items()))\n                if key not in self.visited:\n                    self.res += self.totalPermutations(freq, total) - self.permsWithZero(freq.copy(), total)\n                    self.visited.add(key)\n            return\n\n        for dig in range(1 if left == 0 else 0, 10):\n            palin[left] = palin[right] = dig\n            self.genPal(palin, left + 1, right - 1, divisor, total)\n\n    def countGoodIntegers(self, n, k):\n        self.res = 0\n        self.visited.clear()\n        self.genPal([0] * n, 0, n - 1, k, n)\n        return self.res"
  Title = "Find the Count of Good Integers"
  Url = "/submissions/detail/1604751266/"
  LangName = "Python3"
  Timestamp = 1744474213
  Status = 10
  Runtime = "2687 ms"
  IsPending = "Not Pending"
  Memory = "20.3 MB"
  CompareResult = "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
  HasNotes = false
  FlagType = 1
