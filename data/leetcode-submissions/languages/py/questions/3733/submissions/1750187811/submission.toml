[[Submissions]]
  Id = 1750187811
  StatusDisplay = "Accepted"
  Lang = "python3"
  QuestionId = 3733
  TitleSlug = "length-of-longest-v-shaped-diagonal-segment"
  Code = "class Solution:\n    def lenOfVDiagonal(self, grid: List[List[int]]) -> int:\n        DIRS = [(1, 1), (1, -1), (-1, -1), (-1, 1)]\n        m, n = len(grid), len(grid[0])\n\n        @cache\n        def dfs(cx, cy, direction, turn, target):\n            nx, ny = cx + DIRS[direction][0], cy + DIRS[direction][1]\n            # If it goes beyond the boundary or the next node's value is not the target value, then return\n            if nx < 0 or ny < 0 or nx >= m or ny >= n or grid[nx][ny] != target:\n                return 0\n            turn_int = 1 if turn else 0\n            # Continue walking in the original direction.\n            max_step = dfs(nx, ny, direction, turn, 2 - target)\n            if turn:\n                # Clockwise rotate 90 degrees turn\n                max_step = max(\n                    max_step,\n                    dfs(nx, ny, (direction + 1) % 4, False, 2 - target),\n                )\n            return max_step + 1\n\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    for direction in range(4):\n                        res = max(res, dfs(i, j, direction, True, 2) + 1)\n        return res"
  Title = "Length of Longest V-Shaped Diagonal Segment"
  Url = "/submissions/detail/1750187811/"
  LangName = "Python3"
  Timestamp = 1756300970
  Status = 10
  Runtime = "3938 ms"
  IsPending = "Not Pending"
  Memory = "571.4 MB"
  CompareResult
  HasNotes = false
  FlagType = 1
