[[Submissions]]
  Id = 1000968338
  StatusDisplay = "Accepted"
  Lang = "python3"
  QuestionId = 688
  TitleSlug = "knight-probability-in-chessboard"
  Code = "class Solution:\n    def knightProbability(self, n: int, k: int, row: int, column: int) -> float:\n        # Define possible directions for the knight's moves\n        directions = [(1, 2), (1, -2), (-1, 2), (-1, -2),\n                      (2, 1), (2, -1), (-2, 1), (-2, -1)]\n\n        # Initialize the dynamic programming table\n        dp = [[[0] * n for _ in range(n)] for _ in range(k + 1)]\n        dp[0][row][column] = 1\n\n        # Iterate over the number of moves\n        for moves in range(1, k + 1):\n            # Iterate over the cells on the chessboard\n            for i in range(n):\n                for j in range(n):\n                    # Iterate over possible directions\n                    for direction in directions:\n                        prev_i, prev_j = i - direction[0], j - direction[1]\n                        # Check if the previous cell is within the chessboard\n                        if 0 <= prev_i < n and 0 <= prev_j < n:\n                            # Add the previous probability\n                            dp[moves][i][j] += dp[moves - 1][prev_i][prev_j]\n                    # Divide by 8\n                    dp[moves][i][j] /= 8\n\n        # Calculate total probability by summing probabilities for all cells\n        total_probability = sum(\n            dp[k][i][j]\n            for i in range(n)\n            for j in range(n)\n        )\n        return total_probability"
  Title = "Knight Probability in Chessboard"
  Url = "/submissions/detail/1000968338/"
  LangName = "Python3"
  Timestamp = 1690036595
  Status = 10
  Runtime = "400 ms"
  IsPending = "Not Pending"
  Memory = "19.1 MB"
  CompareResult = "1111111111111111111111"
  HasNotes = false
  FlagType = 1
