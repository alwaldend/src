"""
Module file

https://bazel.build/rules/lib/globals/module
"""

module(
    name = "com-alwaldend-git-src",
    version = "0.0.0",
    compatibility_level = 1,
)

### bazel_dep: https://bcr.bazel.build

bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "rules_cc", version = "0.2.8")
bazel_dep(name = "rules_android", version = "0.6.6")
bazel_dep(name = "rules_license", version = "1.0.0")
bazel_dep(name = "rules_python", version = "1.6.3")
bazel_dep(name = "rules_python_gazelle_plugin", version = "1.6.3")
bazel_dep(name = "rules_kotlin", version = "2.1.9")
bazel_dep(name = "rules_pkg", version = "1.1.0")
bazel_dep(name = "rules_go", version = "0.57.0")
bazel_dep(name = "rules_java", version = "8.16.1")
bazel_dep(name = "rules_rust", version = "0.65.0")
bazel_dep(name = "rules_sh", version = "0.5.0")
bazel_dep(name = "rules_jvm_external", version = "6.8")
bazel_dep(name = "rules_foreign_cc", version = "0.15.1")
bazel_dep(name = "rules_nodejs", version = "6.5.0")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "rules_proto_grpc", version = "5.7.1")
bazel_dep(name = "grpc", version = "1.74.1")
bazel_dep(name = "rules_perl", version = "0.4.2")
bazel_dep(name = "rules_shell", version = "0.6.1")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "aspect_bazel_lib", version = "2.21.2")
bazel_dep(name = "aspect_rules_js", version = "2.6.0")
bazel_dep(name = "gazelle", version = "0.45.0")
bazel_dep(name = "contrib_rules_jvm", version = "0.30.0")
bazel_dep(name = "stardoc", version = "0.8.0")
bazel_dep(name = "bazel_skylib", version = "1.8.2")
bazel_dep(name = "bazel_skylib_gazelle_plugin", version = "1.8.2")
bazel_dep(name = "aspect_rules_lint", version = "1.9.0")

### bazel_dep: file://%workspace%/bzl/registry

bazel_dep(name = "hedron_compile_commands", version = "2024.1008.0")
bazel_dep(name = "com-github-georgewfraser-java-language-server", version = "2025.520.0")
bazel_dep(name = "com-nordicsemi-developer-nrfsdk", version = "15.3.0")
bazel_dep(name = "com-github-aldanial-cloc", version = "2.04.0")
bazel_dep(name = "org-openssl-openssl", version = "3.5.0")
bazel_dep(name = "us-nasm-nasm", version = "2.15.05")
bazel_dep(name = "com-github-google-docsy", version = "0.12.0")
bazel_dep(name = "com-github-fortawesome-font-awesome", version = "6.7.2")
bazel_dep(name = "com-github-twbs-bootstrap", version = "5.3.7")
# bazel_dep(name = "rules_haskell", version = "1.0-patched")

### variables

NODE_VERSION = "16.14.2"

PYTHON_VERSION = "3.12.11"

GO_VERSION = "1.24.3"

GCC_ARM_VERSION = "10.3-2021.10"

### extensions

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

git_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

local_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:local.bzl", "local_repository")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")

crate = use_extension("@rules_rust//crate_universe:extensions.bzl", "crate")

al_repo_map = use_extension("//bzl/extensions:al_repo_map.bzl", "al_repo_map")

perl_repositories = use_extension("@rules_perl//perl:extensions.bzl", "perl_repositories")

cpan = use_extension("@rules_perl//perl/cpan:extensions.bzl", "cpan")

### toolchains

python.toolchain(
    is_default = True,
    python_version = PYTHON_VERSION,
)

node.toolchain(
    name = "com-alwaldend-src-nodejs-toolchains",
    node_version = NODE_VERSION,
)

go_sdk.download(
    version = GO_VERSION,
)

register_toolchains(
    "//bzl/toolchains:qt-local-linux-gcc_64",
)

register_toolchains(
    "//bzl/toolchains:hugo-remote-linux-amd64",
)

register_toolchains(
    "//bzl/toolchains:drawio-remote-linux-x86_64",
)

register_toolchains(
    "//bzl/toolchains:shellcheck-remote-linux-x86_64",
)

register_toolchains(
    "//bzl/toolchains:git-local",
)

register_toolchains(
    "@rules_perl//perl:perl_darwin_arm64_toolchain",
    "@rules_perl//perl:perl_darwin_amd64_toolchain",
    "@rules_perl//perl:perl_linux_amd64_toolchain",
    "@rules_perl//perl:perl_linux_arm64_toolchain",
    "@rules_perl//perl:perl_windows_x86_64_toolchain",
)

### git repos

git_repository(
    name = "com-github-infinitimeorg-infinitime",
    commit = "2105a7b63da8d4065ebfc62e0057f225358eedfc",  # 1.15.0
    init_submodules = True,
    patch_args = ["-p1"],
    patches = [
        "//patch/infinitime:001-add-BUILD.bazel.patch",
        "//patch/infinitime:002-modify-30-minute-chimes-interval.patch",
        "//patch/infinitime:003-add-WatchFaceTerminalCustom.patch",
    ],
    recursive_init_submodules = True,
    remote = "https://github.com/InfiniTimeOrg/InfiniTime.git",
    shallow_since = "1733253068 +0100",
)

# Uncomment if you want to use a local infinitime repository
# local_repository(
#     name = "infinitime-src",
#     path = "~/Git/github.com/infinitimeorg/infinitime",
# )

http_archive(
    name = "com-arm-developer-gcc-arm",
    build_file = "//bzl/build-files:BUILD.general.bazel",
    integrity = "sha256-l9u08BmtFlC3Mvr/zIgWic7cFOK37oY9OQ4KQe8WyaM=",
    strip_prefix = "gcc-arm-none-eabi-10.3-2021.10",
    url = "https://developer.arm.com/-/media/Files/downloads/gnu-rm/{version}/{name}-{version}-{platform}.tar.bz2".format(
        name = "gcc-arm-none-eabi",
        machine = "arm64",
        platform = "x86_64-linux",
        version = GCC_ARM_VERSION,
    ),
)

http_archive(
    name = "com-alwaldend-src-qt",
    build_file = "//bzl/build-files:BUILD.general.bazel",
    integrity = "sha256-T2HlBVHQAEpRP++9sKQQWV2UgSpIYAZG+3NB6g0X4cs=",
    strip_prefix = "qt-everywhere-src-6.9.0",
    urls = ["https://download.qt.io/official_releases/qt/6.9/6.9.0/single/qt-everywhere-src-6.9.0.tar.xz"],
)

### repo maps

al_repo_map.download(
    name = "com-github-koalaman-shellcheck",
    build_file_content = """
load("@bazel_skylib//rules:native_binary.bzl", "native_binary")
native_binary(
    name = "bin",
    src = "shellcheck",
    visibility = ["//visibility:public"],
)
    """,
    download_type = "http_archive",
    repos = {
        "linux-x86_64": [
            "url=https://github.com/koalaman/shellcheck/releases/download/v0.10.0/shellcheck-v0.10.0.linux.x86_64.tar.xz",
            "integrity=sha256-bIgasGmOTm6iNSRfIoMoYFRPF7o4ZEL+fp1in4y+34c=",
        ],
    },
    strip_prefix = "shellcheck-v0.10.0",
)
al_repo_map.download(
    name = "com-github-gohugoio-hugo",
    build_file_content = """
load("@bazel_skylib//rules:native_binary.bzl", "native_binary")
native_binary(
    name = "bin",
    src = "hugo",
    visibility = ["//visibility:public"],
)
    """,
    download_type = "http_archive",
    repos = {
        "linux-amd64": [
            "url=https://github.com/gohugoio/hugo/releases/download/v0.147.8/hugo_extended_0.147.8_linux-amd64.tar.gz",
            "integrity=sha256-l3Atc7thGimVAJ383Ag+8XNGT8yk4ZHWMTwuRlpqMSE=",
        ],
    },
)
al_repo_map.download(
    name = "com-github-jgraph-drawio-desktop",
    download_type = "http_file",
    executable = True,
    repos = {
        "linux-x86_64": [
            "url=https://github.com/jgraph/drawio-desktop/releases/download/v27.0.9/drawio-x86_64-27.0.9.AppImage",
            "integrity=sha256-m4fBtXU61p2dovR3pUVSalbJ+8jIsE8ko3IQdKFHtiY=",
        ],
    },
)

### locks

pip.parse(
    hub_name = "com-alwaldend-src-cpp-infinitime-pip",
    python_version = PYTHON_VERSION,
    requirements_lock = "//cpp/infinitime:requirements.txt",
)
pip.parse(
    hub_name = "com-alwaldend-src-pip",
    python_version = PYTHON_VERSION,
    requirements_lock = "//py:requirements.txt",
)
pip.parse(
    hub_name = "com-alwaldend-src-pip-ansible",
    python_version = PYTHON_VERSION,
    requirements_lock = "//ansible:requirements.txt",
)
pip.parse(
    hub_name = "com-alwaldend-src-starlark-bazel-qt-requirements",
    python_version = PYTHON_VERSION,
    requirements_lock = "//bzl/toolchains:requirements.txt",
)

npm.npm_translate_lock(
    name = "com-alwaldend-src-npm",
    bins = {
        "typescript": [
            "tsc=./bin/tsc",
            "tsserver=./bin/tsserver",
        ],
        "lv_font_conv": ["lv_font_conv=./lv_font_conv.js"],
        "prettier": ["prettier=./bin/prettier.cjs"],
        "postcss-cli": ["postcss=./index.js"],
    },
    data = [
        "//:package.json",
        "//:pnpm-workspace.yaml",
    ],
    pnpm_lock = "//:pnpm-lock.yaml",
    run_lifecycle_hooks = False,
    update_pnpm_lock = True,
    verify_node_modules_ignored = "//:.bazelignore",
)

go_sdk.from_file(go_mod = "//:go.mod")

go_deps.from_file(go_mod = "//:go.mod")
go_deps.gazelle_override(
    # directives = ["gazelle:build_tags extended"], # doesn't work without CGO
    path = "github.com/gohugoio/hugo",
)

maven.install(
    name = "com-alwaldend-src-maven",
    artifacts = [
        "com.squareup.retrofit2:converter-jackson:2.11.0",
        "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.19.0",
        "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.19.0",
        "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.19.0",
        "org.yaml:snakeyaml:2.4",
        "org.apache.velocity:velocity-engine-core:2.4.1",
        "com.squareup.okhttp3:okhttp:4.12.0",
        "org.hibernate.validator:hibernate-validator:8.0.2.Final",
        "org.sonatype.nexus:nexus-capability:3.70.1-02",
        "org.sonatype.nexus:nexus-core:3.70.1-02",
        "org.sonatype.nexus:nexus-plugin-api:3.70.1-02",
        "org.sonatype.nexus:nexus-repository:3.70.1-02",
        "org.sonatype.nexus:nexus-rapture:3.70.1-02",
        "org.sonatype.nexus:nexus-security:3.70.1-02",
    ],
    lock_file = "//:maven-lock.json",
    repositories = [
        "https://repo1.maven.org/maven2",
        "https://maven.google.com",
        "https://repository.sonatype.org/content/groups/sonatype-public-grid",
    ],
)

crate.from_cargo(
    name = "com-alwaldend-src-cargo",
    cargo_lockfile = "//rs:Cargo.lock",
    generate_binaries = True,
    manifests = [
        "//rs:Cargo.toml",
        "//rs/tools:Cargo.toml",
    ],
)

cpan.install(
    name = "com-alwaldend-src-cpan",
    lock = "//pl:cpanfile.snapshot.lock.json",
)

### use_repo

use_repo(
    pip,
    "com-alwaldend-src-cpp-infinitime-pip",
    "com-alwaldend-src-pip",
    "com-alwaldend-src-pip-ansible",
    "com-alwaldend-src-starlark-bazel-qt-requirements",
)

use_repo(npm, "com-alwaldend-src-npm")

use_repo(pnpm, **{"com-alwaldend-src-pnpm": "pnpm"})

use_repo(node, **{"com-alwaldend-src-nodejs-toolchains": "nodejs_toolchains"})

use_repo(
    go_deps,
    "cc_mvdan_sh_v3",
    "com_github_bazelbuild_buildtools",
    "com_github_burntsushi_toml",
    "com_github_goccy_go_yaml",
    "com_github_gohugoio_hugo",
    "com_github_google_shlex",
    "com_github_spf13_cobra",
    "org_golang_google_protobuf",
)

use_repo(maven, "com-alwaldend-src-maven")

use_repo(crate, "com-alwaldend-src-cargo")

use_repo(
    al_repo_map,
    "com-github-gohugoio-hugo-linux-amd64",
    "com-github-jgraph-drawio-desktop-linux-x86_64",
    "com-github-koalaman-shellcheck-linux-x86_64",
)

use_repo(
    perl_repositories,
    "perl_darwin_amd64",
    "perl_darwin_arm64",
    "perl_linux_amd64",
    "perl_linux_arm64",
    "perl_windows_x86_64",
)

use_repo(cpan, "com-alwaldend-src-cpan")
