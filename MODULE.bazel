module(
    name = "src",
    version = "0.0.0"
)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
git_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

FILEGROUP = """
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
filegroup(
    name = "src-filegroup",
    srcs = glob(["**"]),
    visibility = ["//visibility:public"],
)
pkg_tar(
    name = "src-tar",
    srcs = [":src-filegroup"],
    strip_prefix = ".",
    visibility = ["//visibility:public"],
)
"""

bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "rules_license", version = "1.0.0")
bazel_dep(name = "rules_python", version = "1.3.0")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_go", version = "0.54.0")
bazel_dep(name = "rules_nodejs", version = "6.3.5")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "bazel_skylib_gazelle_plugin", version = "1.7.1", dev_dependency = True)
bazel_dep(name = "aspect_bazel_lib", version = "2.15.3")
bazel_dep(name = "gazelle", version = "0.43.0", repo_name = "bazel_gazelle")
bazel_dep(name = "rules_foreign_cc", version = "0.14.0")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    python_version = "3.13",
)
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

git_repository(
    name = "infinitime",
    commit = "2105a7b63da8d4065ebfc62e0057f225358eedfc", # 1.15.0
    init_submodules = True,
    recursive_init_submodules = True,
    remote = "https://github.com/InfiniTimeOrg/InfiniTime.git",
    shallow_since = "1733253068 +0100",
    build_file_content = FILEGROUP 
)
git_repository(
    name = "infinitime-mcuboot",
    commit = "9c99326b9756dbcc35b524636d99ed5f3e6cb29b", # v2.1.0
    remote = "https://github.com/mcu-tools/mcuboot.git",
    shallow_since = "1715263432 -0600",
    build_file_content = """
{filegroup}
filegroup(
    name = "requirements", 
    srcs = ["scripts/requirements.txt"],
    visibility = ["//visibility:public"],
)
    """.format(filegroup = FILEGROUP),
)
pip.parse(
    hub_name = "infinitime-mcuboot-venv",
    python_version = "3.13",
    requirements_lock = "//cpp/infinitime:mcuboot-requirements-lock.txt",
)
use_repo(pip, "infinitime-mcuboot-venv")
http_archive(
    name = "infinitime-cmake",
    url = "https://github.com/Kitware/CMake/releases/download/v4.0.1/cmake-4.0.1-linux-x86_64.tar.gz",
    integrity = "sha256-1mwRwBBYjIJW7iCia0WXfNWy9K7it0LUuKNTdplA0Uc=",
    strip_prefix = "cmake-4.0.1-linux-x86_64",
    build_file_content = FILEGROUP,
)
http_archive(
    name = "infinitime-gcc",
    url = "https://developer.arm.com/-/media/Files/downloads/gnu-rm/{version}/{name}-{version}-{platform}.tar.bz2".format(
      version = "10.3-2021.10", 
      machine = "arm64",
      name = "gcc-arm-none-eabi",
      platform = "x86_64-linux",
    ),
    strip_prefix = "gcc-arm-none-eabi-10.3-2021.10",
    integrity = "sha256-l9u08BmtFlC3Mvr/zIgWic7cFOK37oY9OQ4KQe8WyaM=",
    build_file_content = FILEGROUP,
)
http_archive(
    name = "infinitime-nrfsdk",
    url = "https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v15.x.x/{version}.zip".format(
       version = "nRF5_SDK_15.3.0_59ac345",
    ),
    strip_prefix = "nRF5_SDK_15.3.0_59ac345",
    integrity = "sha256-nJMH11fRCQB/L8xOVHrBCxqf2fqkd+jb8/fhYkxIAaU=",
    build_file_content = FILEGROUP, 
)
