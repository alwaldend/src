### module

module(
    name = "com-alwaldend-src",
    version = "0.0.0",
    compatibility_level = 1,
)

### bazel_dep

bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "rules_android", version = "0.6.4")
bazel_dep(name = "rules_license", version = "1.0.0")
bazel_dep(name = "rules_python", version = "1.4.1")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_go", version = "0.54.0")
bazel_dep(name = "rules_java", version = "8.11.0")
bazel_dep(name = "rules_rust", version = "0.61.0")
bazel_dep(name = "rules_jvm_external", version = "6.7")
bazel_dep(name = "rules_foreign_cc", version = "0.14.0")
bazel_dep(name = "rules_nodejs", version = "6.3.0")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "rules_perl", version = "0.4.1")
bazel_dep(name = "rules_shell", version = "0.4.1")
bazel_dep(name = "rules_python_gazelle_plugin", version = "1.4.0-rc4")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "aspect_bazel_lib", version = "2.15.3")
bazel_dep(name = "aspect_rules_js", version = "2.3.7")
bazel_dep(name = "gazelle", version = "0.43.0")
bazel_dep(name = "contrib_rules_jvm", version = "0.28.0")
bazel_dep(name = "stardoc", version = "0.8.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "bazel_skylib_gazelle_plugin", version = "1.7.1")
bazel_dep(name = "hedron_compile_commands")

### overrides

git_override(
    module_name = "hedron_compile_commands",
    commit = "4f28899228fb3ad0126897876f147ca15026151e",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
)

### variables

NODE_VERSION = "16.14.2"

PYTHON_VERSION = "3.13.2"

GO_VERSION = "1.24.3"

GCC_ARM_VERSION = "10.3-2021.10"

NRFSDK_VERSION = "nRF5_SDK_15.3.0_59ac345"

FILEGROUP = """
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("@bazel_skylib//rules/directory:directory.bzl", "directory")
directory(
    name = "src-directory",
    srcs = glob(["**"]),
    visibility = ["//visibility:public"],
)
filegroup(
    name = "src-filegroup",
    srcs = glob(["**"]),
    visibility = ["//visibility:public"],
)
pkg_tar(
    name = "src-tar",
    srcs = [":src-filegroup"],
    strip_prefix = ".",
    visibility = ["//visibility:public"],
)
"""

### extensions

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

git_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

local_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:local.bzl", "local_repository")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")

crate = use_extension("@rules_rust//crate_universe:extensions.bzl", "crate")

shellcheck = use_extension("//starlark/bazel/extensions:defs.bzl", "shellcheck")

perl_repositories = use_extension("@rules_perl//perl:extensions.bzl", "perl_repositories")

cpan = use_extension("@rules_perl//perl/cpan:extensions.bzl", "cpan")

### toolchains

python.toolchain(
    is_default = True,
    python_version = PYTHON_VERSION,
)

node.toolchain(
    name = "com-alwaldend-src-nodejs-toolchains",
    node_version = NODE_VERSION,
)

go_sdk.download(version = GO_VERSION)

register_toolchains("//starlark/bazel/qt:preinstalled-qt-toolchain")

register_toolchains(
    "@rules_perl//perl:perl_darwin_arm64_toolchain",
    "@rules_perl//perl:perl_darwin_amd64_toolchain",
    "@rules_perl//perl:perl_linux_amd64_toolchain",
    "@rules_perl//perl:perl_linux_arm64_toolchain",
    "@rules_perl//perl:perl_windows_x86_64_toolchain",
)

### git repos

git_repository(
    name = "com-github-georgewfraser-java-language-server",
    build_file_content = FILEGROUP,
    commit = "0dd0c8cc8e62bfa0ef6888ecee5877608014db06",  # main
    remote = "https://github.com/georgewfraser/java-language-server.git",
    shallow_since = "1746654411 -0700",
)

git_repository(
    name = "com-github-google-docsy",
    build_file_content = FILEGROUP,
    commit = "cf0c68f041daac066a0292d521461dbd092d7c31",  # v0.11.0
    remote = "https://github.com/google/docsy.git",
    shallow_since = "1729295371 -0400",
)

git_repository(
    name = "com-github-infinitimeorg-infinitime",
    commit = "2105a7b63da8d4065ebfc62e0057f225358eedfc",  # 1.15.0
    init_submodules = True,
    patch_args = ["-p1"],
    patches = [
        "//patches/infinitime:001-add-BUILD.bazel.patch",
        "//patches/infinitime:002-modify-30-minute-chimes-interval.patch",
        "//patches/infinitime:003-add-WatchFaceTerminalCustom.patch",
    ],
    recursive_init_submodules = True,
    remote = "https://github.com/InfiniTimeOrg/InfiniTime.git",
    shallow_since = "1733253068 +0100",
)

# Uncomment if you want to use a local infinitime repository
# local_repository(
#     name = "infinitime-src",
#     path = "~/Git/github.com/infinitimeorg/infinitime",
# )

http_archive(
    name = "org-openssl-openssl",
    build_file = "//c/openssl:BUILD.openssl.bazel",
    integrity = "sha256-NE0KefGpsIApsHROLMQBpD+ckKzRBE0JpTC0iFqOn8A=",
    strip_prefix = "openssl-3.5.0",
    urls = [
        "https://github.com/openssl/openssl/releases/download/openssl-3.5.0/openssl-3.5.0.tar.gz",
    ],
)

http_archive(
    name = "us-nasm-nasm",
    build_file = "//c/openssl:BUILD.nasm.bazel",
    sha256 = "f5c93c146f52b4f1664fa3ce6579f961a910e869ab0dae431bd871bdd2584ef2",
    strip_prefix = "nasm-2.15.05",
    urls = [
        "https://mirror.bazel.build/www.nasm.us/pub/nasm/releasebuilds/2.15.05/win64/nasm-2.15.05-win64.zip",
        "https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/win64/nasm-2.15.05-win64.zip",
    ],
)

http_archive(
    name = "com-arm-developer-gcc-arm",
    build_file_content = FILEGROUP,
    integrity = "sha256-l9u08BmtFlC3Mvr/zIgWic7cFOK37oY9OQ4KQe8WyaM=",
    strip_prefix = "gcc-arm-none-eabi-10.3-2021.10",
    url = "https://developer.arm.com/-/media/Files/downloads/gnu-rm/{version}/{name}-{version}-{platform}.tar.bz2".format(
        name = "gcc-arm-none-eabi",
        machine = "arm64",
        platform = "x86_64-linux",
        version = GCC_ARM_VERSION,
    ),
)

http_archive(
    name = "com-nordicsemi-developer-nrfsdk",
    build_file_content = FILEGROUP,
    integrity = "sha256-nJMH11fRCQB/L8xOVHrBCxqf2fqkd+jb8/fhYkxIAaU=",
    strip_prefix = NRFSDK_VERSION,
    url = "https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v15.x.x/{version}.zip".format(
        version = NRFSDK_VERSION,
    ),
)

http_archive(
    name = "com-alwaldend-src-qt",
    build_file_content = FILEGROUP,
    integrity = "sha256-T2HlBVHQAEpRP++9sKQQWV2UgSpIYAZG+3NB6g0X4cs=",
    strip_prefix = "qt-everywhere-src-6.9.0",
    url = "https://download.qt.io/official_releases/qt/6.9/6.9.0/single/qt-everywhere-src-6.9.0.tar.xz",
)

### shellcheck

shellcheck.install(
    name = "com-github-koalaman-shellcheck",
    integrity = {
        "linux:amd64": "sha256-bIgasGmOTm6iNSRfIoMoYFRPF7o4ZEL+fp1in4y+34c=",
    },
    urls = {
        "linux:amd64": "https://github.com/koalaman/shellcheck/releases/download/v0.10.0/shellcheck-v0.10.0.linux.x86_64.tar.xz",
    },
)

### locks

pip.parse(
    hub_name = "com-alwaldend-src-cpp-infinitime-pip",
    python_version = PYTHON_VERSION,
    requirements_lock = "//cpp/infinitime:requirements.txt",
)
pip.parse(
    hub_name = "com-alwaldend-src-pip",
    python_version = PYTHON_VERSION,
    requirements_lock = "//python:requirements.txt",
)
pip.parse(
    hub_name = "com-alwaldend-src-starlark-bazel-qt-requirements",
    python_version = PYTHON_VERSION,
    requirements_lock = "//starlark/bazel/qt:requirements.txt",
)

npm.npm_translate_lock(
    name = "com-alwaldend-src-npm",
    bins = {
        "typescript": [
            "tsc=./bin/tsc",
            "tsserver=./bin/tsserver",
        ],
        "lv_font_conv": ["lv_font_conv=./lv_font_conv.js"],
    },
    data = ["//:package.json"],
    pnpm_lock = "//:pnpm-lock.yaml",
    run_lifecycle_hooks = False,
    update_pnpm_lock = True,
    verify_node_modules_ignored = "//:.bazelignore",
)

go_sdk.from_file(go_mod = "//:go.mod")

go_deps.from_file(go_mod = "//:go.mod")
go_deps.gazelle_override(
    # directives = ["gazelle:build_tags extended"], # doesn't work without CGO
    path = "github.com/gohugoio/hugo",
)

maven.install(
    name = "com-alwaldend-src-maven",
    artifacts = [
        "com.squareup.retrofit2:converter-jackson:2.11.0",
        "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.19.0",
        "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.19.0",
        "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.19.0",
        "org.yaml:snakeyaml:2.4",
        "org.apache.velocity:velocity-engine-core:2.4.1",
        "com.squareup.okhttp3:okhttp:4.12.0",
        "org.hibernate.validator:hibernate-validator:8.0.2.Final",
        "org.sonatype.nexus:nexus-capability:3.70.1-02",
        "org.sonatype.nexus:nexus-core:3.70.1-02",
        "org.sonatype.nexus:nexus-plugin-api:3.70.1-02",
        "org.sonatype.nexus:nexus-repository:3.70.1-02",
        "org.sonatype.nexus:nexus-rapture:3.70.1-02",
        "org.sonatype.nexus:nexus-security:3.70.1-02",
    ],
    lock_file = "//:maven-lock.json",
    repositories = [
        "https://repo1.maven.org/maven2",
        "https://maven.google.com",
        "https://repository.sonatype.org/content/groups/sonatype-public-grid",
    ],
)

crate.from_cargo(
    name = "com-alwaldend-src-cargo",
    cargo_lockfile = "//:Cargo.lock",
    generate_binaries = True,
    manifests = [
        "//:Cargo.toml",
        "//rust/tools:Cargo.toml",
    ],
)

cpan.install(
    name = "com-alwaldend-src-cpan",
    lock = "//:cpanfile.snapshot.lock.json",
)

### use_repo

use_repo(
    pip,
    "com-alwaldend-src-cpp-infinitime-pip",
    "com-alwaldend-src-pip",
    "com-alwaldend-src-starlark-bazel-qt-requirements",
)

use_repo(npm, "com-alwaldend-src-npm")

use_repo(pnpm, **{"com-alwaldend-src-pnpm": "pnpm"})

use_repo(node, **{"com-alwaldend-src-nodejs-toolchains": "nodejs_toolchains"})

use_repo(
    go_deps,
    "cc_mvdan_sh_v3",
    "com_github_bazelbuild_buildtools",
    "com_github_goccy_go_yaml",
    "com_github_gohugoio_hugo",
    "com_github_google_shlex",
    "com_github_spf13_cobra",
    "org_golang_google_protobuf",
)

use_repo(maven, "com-alwaldend-src-maven")

use_repo(crate, "com-alwaldend-src-cargo")

use_repo(shellcheck, "com-github-koalaman-shellcheck")

use_repo(
    perl_repositories,
    "perl_darwin_amd64",
    "perl_darwin_arm64",
    "perl_linux_amd64",
    "perl_linux_arm64",
    "perl_windows_x86_64",
)

use_repo(cpan, "com-alwaldend-src-cpan")
