bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "rules_license", version = "1.0.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "bazel_skylib_gazelle_plugin", version = "1.7.1", dev_dependency = True)
bazel_dep(name = "aspect_bazel_lib", version = "2.15.3")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
git_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

FILEGROUP = """
filegroup(
    name = "all",
    srcs = glob(["**"]),
    visibility = ["//visibility:public"],
)
"""

# infinitime deps
infinitime_gcc_version = "10.3-2021.10"
infinitime_nrf_sdk_version = "nRF5_SDK_15.3.0_59ac345"
infinitime_gcc_arm_path = "gcc-arm-none-eabi-{}".format(infinitime_gcc_version)
infinitime_machine = "arm64"
git_repository(
    name = "infinitime",
    commit = "2105a7b63da8d4065ebfc62e0057f225358eedfc", # 1.15.0
    init_submodules = True,
    recursive_init_submodules = True,
    remote = "https://github.com/InfiniTimeOrg/InfiniTime.git",
    shallow_since = "1733253068 +0100",
    build_file_content = FILEGROUP 
)
http_archive(
    name = "infinitime-gcc",
    url = "https://developer.arm.com/-/media/Files/downloads/gnu-rm/{}/{}-{}-linux.tar.bz2".format(
      infinitime_gcc_version, 
      infinitime_gcc_arm_path, 
      infinitime_machine
    ),
    integrity = "",
    build_file_content = FILEGROUP,
)
http_archive(
    name = "infinitime-nrfsdk",
    url = "https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v15.x.x/{}.zip".format(
       infinitime_nrf_sdk_version 
    ),
    integrity = "",
    build_file_content = FILEGROUP, 
)
