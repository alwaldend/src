### module

module(
    name = "com-alwaldend-src",
)

### bazel_dep

bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "rules_android", version = "0.6.4")
bazel_dep(name = "rules_license", version = "1.0.0")
bazel_dep(name = "rules_python", version = "1.4.0-rc4")
bazel_dep(name = "rules_python_gazelle_plugin", version = "1.4.0-rc4")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_go", version = "0.54.0")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "rules_foreign_cc", version = "0.14.0")
bazel_dep(name = "aspect_rules_js", version = "2.3.7")
bazel_dep(name = "rules_nodejs", version = "6.3.0")
bazel_dep(name = "aspect_bazel_lib", version = "2.15.3")
bazel_dep(name = "gazelle", version = "0.43.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")

bazel_dep(name = "bazel_skylib_gazelle_plugin", version = "1.7.1", dev_dependency = True)

### variables

NODE_VERSION = "16.14.2"

PYTHON_VERSION = "3.13.2"

GO_VERSION = "1.24.3"

GCC_ARM_VERSION = "10.3-2021.10"

NRFSDK_VERSION = "nRF5_SDK_15.3.0_59ac345"

FILEGROUP = """
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("@bazel_skylib//rules/directory:directory.bzl", "directory")
directory(
    name = "src-directory",
    srcs = glob(["**"]),
    visibility = ["//visibility:public"],
)
filegroup(
    name = "src-filegroup",
    srcs = glob(["**"]),
    visibility = ["//visibility:public"],
)
pkg_tar(
    name = "src-tar",
    srcs = [":src-filegroup"],
    strip_prefix = ".",
    visibility = ["//visibility:public"],
)
"""

### extensions

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

git_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

local_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:local.bzl", "local_repository")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node", dev_dependency = True)

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")

### toolchains

python.toolchain(
    is_default = True,
    python_version = PYTHON_VERSION,
)

node.toolchain(
    node_version = NODE_VERSION,
)

go_sdk.download(version = GO_VERSION)

### infinitime

git_repository(
    name = "infinitime-src",
    commit = "2105a7b63da8d4065ebfc62e0057f225358eedfc",  # 1.15.0
    init_submodules = True,
    patch_args = ["-p1"],
    patches = [
        "//patches/infinitime:001-add-BUILD.bazel.patch",
        "//patches/infinitime:002-modify-30-minute-chimes-interval.patch",
        "//patches/infinitime:003-add-WatchFaceTerminalCustom.patch",
    ],
    recursive_init_submodules = True,
    remote = "https://github.com/InfiniTimeOrg/InfiniTime.git",
    shallow_since = "1733253068 +0100",
)

local_repository(
    name = "infinitime-src-local",
    path = "../../infinitimeorg/infinitime",
)

http_archive(
    name = "infinitime-gcc",
    build_file_content = FILEGROUP,
    integrity = "sha256-l9u08BmtFlC3Mvr/zIgWic7cFOK37oY9OQ4KQe8WyaM=",
    strip_prefix = "gcc-arm-none-eabi-10.3-2021.10",
    url = "https://developer.arm.com/-/media/Files/downloads/gnu-rm/{version}/{name}-{version}-{platform}.tar.bz2".format(
        name = "gcc-arm-none-eabi",
        machine = "arm64",
        platform = "x86_64-linux",
        version = GCC_ARM_VERSION,
    ),
)

http_archive(
    name = "infinitime-nrfsdk",
    build_file_content = FILEGROUP,
    integrity = "sha256-nJMH11fRCQB/L8xOVHrBCxqf2fqkd+jb8/fhYkxIAaU=",
    strip_prefix = NRFSDK_VERSION,
    url = "https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v15.x.x/{version}.zip".format(
        version = NRFSDK_VERSION,
    ),
)

### locks

pip.parse(
    hub_name = "infinitime-venv",
    python_version = PYTHON_VERSION,
    requirements_lock = "//cpp/infinitime:requirements.txt",
)

npm.npm_translate_lock(
    name = "npm",
    pnpm_lock = "//:pnpm-lock.yaml",
    run_lifecycle_hooks = False,
    verify_node_modules_ignored = "//:.bazelignore",
)

go_sdk.from_file(go_mod = "//:go.mod")

go_deps.from_file(go_mod = "//:go.mod")

### use_repo

use_repo(pip, "infinitime-venv")

use_repo(npm, "npm")

use_repo(pnpm, "pnpm")

use_repo(node, "nodejs_toolchains")

use_repo(go_deps, "com_github_spf13_cobra")
