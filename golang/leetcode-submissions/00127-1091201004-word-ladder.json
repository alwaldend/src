{
    "id": 1091201004,
    "status_display": "Accepted",
    "lang": "golang",
    "question_id": 127,
    "title_slug": "word-ladder",
    "code": "func ladderLength(beginWord string, endWord string, wordList []string) int {\n    \n    set := make(map[string]struct{}, len(wordList))\n    \n    present := false\n    \n    for _, v := range wordList {\n        if endWord == v {\n            present = true\n        } \n        \n        set[v] = struct{}{} \n    }\n    \n    if !present {\n        return 0\n    }\n    \n    set[beginWord] = struct{}{}\n    q := []string{beginWord}\n    \n    depth := 1\n    breadth := 0\n    \n    breadth = len(q)\n    \n    for ;breadth \u003e 0; {\n        s := q[0]\n        \n        if s == endWord {\n            return depth\n        }\n        \n        for i:='a'; i \u003c= 'z'; i += 1 {\n                        \n            for j := 0; j\u003clen(s); j++ {\n \n                if rune(s[j]) != i {\n                    \n                    temp := s[:j] + string(i) + s[j+1:]\n                    if _, ok := set[temp]; !ok {\n                        continue\n                    }\n                    \n                    q = append(q, temp)\n                    delete(set, s)\n                }\n            }\n        }\n        \n        q = q[1:]\n        \n        breadth -= 1\n        if breadth == 0 {\n            breadth = len(q)\n            depth += 1\n        }\n    }\n    \n    return 0 \n}",
    "title": "Word Ladder",
    "url": "/submissions/detail/1091201004/",
    "lang_name": "Go",
    "time": "1 year, 6 months",
    "timestamp": 1699093730,
    "status": 10,
    "runtime": "2746 ms",
    "is_pending": "Not Pending",
    "memory": "8 MB",
    "compare_result": "111111111111111111111111111111111111111111111111111",
    "flag_type": 1
}