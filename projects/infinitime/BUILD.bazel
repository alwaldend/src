load("@aspect_rules_js//js:defs.bzl", "js_binary", "js_run_binary")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@bazel_skylib//rules/directory:directory.bzl", "directory")
load("@com_alwaldend_src_pip_projects_infinitime//:requirements.bzl", "all_requirements")
load("@rules_python//python:py_binary.bzl", "py_binary")
load("@rules_python//python:py_library.bzl", "py_library")
load("@rules_python//python/entry_points:py_console_script_binary.bzl", "py_console_script_binary")
load("//bzl/rules/bazel_shell_worker:al_genrule.bzl", "al_genrule")
load("//bzl/rules/bzl:al_bzl_target_doc.bzl", "al_bzl_target_doc")
load("//bzl/rules/git:al_git_changelog.bzl", "al_git_changelog")
load("//bzl/rules/pkg:al_pkg_tar_combined.bzl", "al_pkg_tar_combined")
load(
    "//bzl/rules/py:al_compile_pip_requirements_combined.bzl",
    "al_compile_pip_requirements_combined",
)
load("//bzl/rules/py:al_py_binary_shell.bzl", "al_py_binary_shell")
load(
    "//bzl/rules/txt:al_combine_files.bzl",
    "al_combine_files",
)

al_git_changelog(
    name = "changelog",
    visibility = ["//:__subpackages__"],
)

al_compile_pip_requirements_combined(
    name = "requirements",
    srcs = [
        "requirements.in",
        "@com_github_infinitimeorg_infinitime//:requirements",
    ],
    requirements_txt = "requirements.txt",
    visibility = ["//:__subpackages__"],
)

py_console_script_binary(
    name = "adafruit_nrfutil",
    pkg = "@com_alwaldend_src_pip_projects_infinitime//adafruit_nrfutil",
    script = "adafruit-nrfutil",
)

al_py_binary_shell(
    name = "python_shell",
    deps = all_requirements + ["@com_github_infinitimeorg_infinitime//:imgtool"],
)

al_pkg_tar_combined(
    name = "firmware_deps",
    srcs = [
        {
            "label": "@com_github_infinitimeorg_infinitime//:src_tar",
            "dir": "src",
        },
        {
            "label": "@com_arm_developer_gcc_arm//:src_tar",
            "dir": "gcc",
        },
        {
            "label": "@com_nordicsemi_developer_nrfsdk//:src_tar",
            "dir": "nrfsdk",
        },
    ],
)

# al_genrule(
#     name = "firmware",
#     srcs = [":firmware_deps"],
#     outs = ["firmware.tar"],
#     cmd = """
#         set -eux pipefail
# 	build_type="Release"
# 	build_dir="build"
# 	deps_dir="deps"
# 	bin_dir="${PWD}/bin"
# 	src_dir="${deps_dir}/src"
#         gcc_dir="${deps_dir}/gcc"
#         nrfsdk_dir="${deps_dir}/nrfsdk"
#         export BAZEL_PYTHON_SHELL_TYPE=bash
#         for dir in "${bin_dir}" "$(dirname '{{ .Ctx.Var.NODE_PATH }}')" "$(dirname '{{ .Ctx.Var.PYTHON3 }}')" "${gcc_dir}/bin" "${nrfsdk_dir}/bin"; do
#             export PATH="${dir}:${PATH}"
#         done
#
# 	mkdir -p "${bin_dir}" "${build_dir}" "${deps_dir}"
#         ln -s "${PWD}/$(execpath //js/tools:node_modules/lv_font_conv/dir)/lv_font_conv.js" "${bin_dir}/lv_font_conv"
#         ln -s "${PWD}/$(execpath :adafruit_nrfutil)" "${bin_dir}/adafruit-nrfutil"
#         rm -rf "${deps_dir}"/*
# 	tar -xf "$(find -name "*firmware_deps*" -print -quit)" -C "${deps_dir}"
#         touch $(execpath :firmware.tar)
#         exit
# 	'$(rootpath :python-shell)' '{{ .Ctx.Var.CMAKE }}' \
#             -G "Unix Makefiles" \
#             -S "${src_dir}" \
#             -B "${build_dir}" \
#             -DCMAKE_BUILD_TYPE="${build_type}" \
#             -DARM_NONE_EABI_TOOLCHAIN_PATH="${gcc_dir}" \
#             -DNRF5_SDK_PATH="${nrfsdk_dir}" \
#             -DBUILD_DFU=1 \
#             -DBUILD_RESOURCES=1
# 	'$(rootpath :python-shell)' '{{ .Ctx.Var.CMAKE }}' \
#             --build "${build_dir}" \
#             --config "${build_type}" \
#             --target pinetime-mcuboot-app
#         mkdir output
#         find "${build_dir}" -name "*.zip" -exec cp "{}" "output/" ";"
#         tar -cf "$(execpath :firmware.tar)" -C output .
#     """,
#     toolchains = [
#         "@rules_foreign_cc//toolchains:current_cmake_toolchain",
#         "@com_alwaldend_src_nodejs_toolchains//:resolved_toolchain",
#         "@rules_python//python:current_py_toolchain",
#     ],
#     tools = [
#         ":adafruit-nrfutil",
#         ":python-shell",
#         "//js/tools:node_modules/lv_font_conv/dir",
#     ],
# )

al_bzl_target_doc(
    name = "bazel_target_doc",
    visibility = ["//:__subpackages__"],
)
