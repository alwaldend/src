load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@infinitime-mcuboot-venv//:requirements.bzl", "all_requirements")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@aspect_rules_js//js:defs.bzl", "js_binary", "js_run_binary")
load("//bazel/utils:utils.bzl", "py_binary_shell", "pkg_tar_combined")

compile_pip_requirements(
    name = "mcuboot-requirements",
    src = "@infinitime-mcuboot//scripts/requirements.txt",
    requirements_txt = "mcuboot-requirements-lock.txt",
)

filegroup(
    name = "patches",
    srcs = glob(["patches/*"]),
)

genrule(
    name = "src-patched",
    srcs = ["@infinitime//:src-tar", ":patches"],
    outs = ["src-patched.tar"],
    cmd = """
        set -eux && \
            tar -xf $(location @infinitime//:src-tar) && \
            git apply $(locations :patches) && \
            tar -cf $(location :src-patched.tar) *
    """,
)

py_binary_shell(
    name = "mcuboot-venv-shell",
    deps = all_requirements,
)

pkg_tar_combined(
    name = "firmware-deps",
    tars = [
        { "label": ":src-patched", "dir": "src" },
	{ "label": "@infinitime-gcc//:src-tar", "dir": "gcc" },
	{ "label": "@infinitime-nrfsdk//:src-tar", "dir": "nrfsdk" },
    ],
)

genrule(
    name = "firmware",
    srcs = [":firmware-deps","//:node_modules/lv_font_conv/dir" ],
    tools = [":mcuboot-venv-shell"],
    toolchains = ["@rules_foreign_cc//toolchains:current_cmake_toolchain", "@nodejs_toolchains//:resolved_toolchain"],
    outs = ["check1"],
    cmd = """
        set -euxo pipefail
	ls -la $(execpath //:node_modules/lv_font_conv/dir)
	exit 1
        find -name "lv_font_conv" -type f -executable
	find -name "node"
	which node
	exit 1
	export BAZEL_BINDIR=$(BINDIR) 
	exit 1
	export PATH="$${PATH}:$${PWD}:$$(dirname "$$(realpath "$$(find -name "cmake" -executable -print -quit)")")"
	build_type="Release" 
	build_dir="."

	tar -xf $(location :firmware-deps)
	$(location :mcuboot-venv-shell) cmake \
            -G "Unix Makefiles" \
            -S "src" \
            -B "$${build_dir}" \
            -DCMAKE_BUILD_TYPE="$${build_type}" \
	    -LV_FONT_CONV=lv_font_conf.js \
            -DARM_NONE_EABI_TOOLCHAIN_PATH="gcc" \
            -DNRF5_SDK_PATH="nrfsdk" \
            -DBUILD_DFU=1 \
            -DBUILD_RESOURCES=1  
	$(location :mcuboot-venv-shell) cmake \
            --build "$${build_dir}" \
            --config "$${build_type}"
    """,)
