load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@infinitime-mcuboot-venv//:requirements.bzl", "all_requirements")
load("//bazel/utils:utils.bzl", "py_binary_shell")

compile_pip_requirements(
    name = "mcuboot-requirements",
    src = "@infinitime-mcuboot//:requirements",
    requirements_txt = "mcuboot-requirements-lock.txt",
)

filegroup(
    name = "patches",
    srcs = glob(["patches/*"]),
)

genrule(
    name = "src-archive",
    srcs = ["@infinitime//:src"],
    outs = ["src.tar"],
    cmd = "tar -cf $(location :src.tar) $(locations @infinitime//:src)",
)

genrule(
    name = "src-patched",
    srcs = [":src-archive", ":patches"],
    outs = ["src-patched.tar"],
    cmd = """
        set -eux && \
            tar -xvf $(location :src-archive) && \
            git apply $(locations :patches) && \
            tar -cf $(location :src-patched.tar) *
    """,
)

py_binary_shell(
    name = "mcuboot-venv-shell",
    deps = all_requirements,
)

genrule(
    name = "firmware",
    tools = [":mcuboot-venv-shell", "@infinitime-cmake//:cmake", "@infinitime-gcc//:all", "@infinitime-nrfsdk//:all"],
    outs = ["check1"],
    cmd = """
        set -eux
	$(location :mcuboot-venv-shell) $(location @infinitime-cmake//:cmake) \
            -G "Unix Makefiles" \
            -S "$SOURCES_DIR" \
            -B "$BUILD_DIR" \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DARM_NONE_EABI_TOOLCHAIN_PATH="$TOOLS_DIR/$GCC_ARM_PATH" \
            -DNRF5_SDK_PATH="$TOOLS_DIR/$NRF_SDK_VER" \
            -DBUILD_DFU=1 \
            -DBUILD_RESOURCES=1  
	$(location :mcuboot-venv-shell) $(location @infinitime-cmake//:cmake) \
            --build "$BUILD_DIR" \
            --config $BUILD_TYPE \
            $target \
            -- -j$(nproc)
    """,
)
