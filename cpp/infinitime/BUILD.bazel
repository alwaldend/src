load("@aspect_rules_js//js:defs.bzl", "js_binary", "js_run_binary")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@bazel_skylib//rules/directory:directory.bzl", "directory")
load("@infinitime-venv//:requirements.bzl", "all_requirements")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python//python:py_binary.bzl", "py_binary")
load("@rules_python//python:py_library.bzl", "py_library")
load("@rules_python//python/entry_points:py_console_script_binary.bzl", "py_console_script_binary")
load("//bazel/utils:utils.bzl", "pkg_tar_combined", "py_binary_shell")

genrule(
    name = "requirements-src",
    srcs = ["requirements.txt", "@infinitime//:requirements"],
    outs = ["requirements-combined.txt"],
    cmd = "cat $(SRCS) >$(@)",
)

compile_pip_requirements(
    name = "requirements",
    src = ":requirements-src",
    requirements_txt = "requirements-lock.txt",
    visibility = ["//visibility:public"],
)

py_console_script_binary(
    name = "adafruit-nrfutil",
    pkg = "@infinitime-venv//adafruit_nrfutil",
)

py_binary_shell(
    name = "python-shell",
    shell_type = "python",
    deps = all_requirements + ["@infinitime//:imgtool"],
)

pkg_tar_combined(
    name = "firmware-deps",
    tars = [
        {
            "label": "@infinitime//:src-tar",
            "dir": "src",
        },
        {
            "label": "@infinitime-gcc//:src-tar",
            "dir": "gcc",
        },
        {
            "label": "@infinitime-nrfsdk//:src-tar",
            "dir": "nrfsdk",
        },
    ],
)

genrule(
    name = "check",
    tools = [":python-shell-pure"],
    outs = ["check.txt"],
    cmd = "$(location :python-shell-pure) python3 -c 'import cbor2; print(cbor2)'",
    visibility = ["//visibility:public"]
)

genrule(
    name = "firmware",
    srcs = [
        ":firmware-deps",
    ],
    tools = [
        ":python-shell",
        ":adafruit-nrfutil",
        "//:node_modules/lv_font_conv/dir",
    ],
    toolchains = [
        "@rules_foreign_cc//toolchains:current_cmake_toolchain",
        "@nodejs_toolchains//:resolved_toolchain",
        "@rules_python//python:current_py_toolchain",
    ],
    outs = ["pinetime-mcuboot-app-dfu.zip"],
    cmd = """
        set -eux
	build_type="Release" 
	build_dir="$${PWD}/build"
	bin_dir="$${PWD}/bin"
	deps_dir="$${PWD}/deps"
        src_dir="$${deps_dir}/src"
        gcc_dir="$${deps_dir}/gcc"
        nrfsdk_dir="$${deps_dir}/nrfsdk"
        export BAZEL_PYTHON_SHELL_TYPE=bash
	export PATH="$${bin_dir}:$${PWD}/$$(dirname $(NODE_PATH)):$${PWD}/$$(dirname $(PYTHON3)):$${gcc_dir}/bin:$${nrfsdk_dir}/bin:$${PATH}"

	mkdir -p "$${bin_dir}" "$${build_dir}" "$${deps_dir}"
        ln -s "$${PWD}/$(execpath //:node_modules/lv_font_conv/dir)/lv_font_conv.js" "$${bin_dir}/lv_font_conv"
        ln -s "$${PWD}/$(execpath :adafruit-nrfutil)" "$${bin_dir}/adafruit-nrfutil"
	tar -xf $(location :firmware-deps) -C "$${deps_dir}"
	$(location :python-shell) $(CMAKE) \
            -G "Unix Makefiles" \
            -S "$${src_dir}" \
            -B "$${build_dir}" \
            -DCMAKE_BUILD_TYPE="$${build_type}" \
            -DARM_NONE_EABI_TOOLCHAIN_PATH="$${gcc_dir}" \
            -DNRF5_SDK_PATH="$${nrfsdk_dir}" \
            -DBUILD_DFU=1 \
            -DBUILD_RESOURCES=1  
	$(location :python-shell) $(CMAKE) \
            --build "$${build_dir}" \
            --config "$${build_type}" \
            --target pinetime-mcuboot-app
        find -name "pinetime-mcuboot-app-dfu-*.zip" -exec mv "{}" "$(@)" ";"
    """,
)
