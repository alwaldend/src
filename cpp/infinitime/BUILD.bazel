load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@infinitime-mcuboot-venv//:requirements.bzl", "all_requirements")
load("//bazel/utils:utils.bzl", "py_binary_shell")

compile_pip_requirements(
    name = "mcuboot-requirements",
    src = "@infinitime-mcuboot//:requirements",
    requirements_txt = "mcuboot-requirements-lock.txt",
)

filegroup(
    name = "patches",
    srcs = glob(["patches/*"]),
)

genrule(
    name = "src-patched",
    srcs = ["@infinitime//:src-tar", ":patches"],
    outs = ["src-patched.tar"],
    cmd = """
        set -eux && \
            tar -xf $(location @infinitime//:src-tar) && \
            git apply $(locations :patches) && \
            tar -cf $(location :src-patched.tar) *
    """,
)

py_binary_shell(
    name = "mcuboot-venv-shell",
    deps = all_requirements,
)

genrule(
    name = "firmware",
    srcs = [":src-patched"],
    tools = [
        ":mcuboot-venv-shell", 
        "@infinitime-gcc//:src-tar",
        "@infinitime-nrfsdk//:src-tar",
	#"@rules_foreign_cc//toolchains:cmake_toolchain",
    ],
    outs = ["check1"],
    cmd = """
        set -eux
	build_dir=$$(realpath build)
	gcc_dir=$$(realpath gcc)
	gcc_path="$${gcc_dir}/bin/arm-none-eabi-gcc"
	nrfsdk_dir=$$(realpath nrfsdk)
	src_dir=$$(realpath src)
	cmake_dir=$$(realpath cmake)
	cmake_path="$${cmake_dir}/bin/cmake"
	build_type="Release" 
	strip_components="2"

	export PATH="$${PATH}:$${gcc_dir}/bin:$${cmake_dir}/bin"

	mkdir -p "$${src_dir}" "$${build_dir}" "$${gcc_dir}" "$${nrfsdk_dir}" "$${cmake_dir}"
	ls -la $(locations @rules_foreign_cc//toolchains:cmake_toolchain)
	tar -xf $(location :src-patched) --strip-components "$${strip_components}" -C "$${src_dir}"
	tar -xf $(location @infinitime-cmake//:src-tar) --strip-components "$${strip_components}" -C "$${cmake_dir}"
	tar -xf $(location @infinitime-gcc//:src-tar) --strip-components "$${strip_components}" -C "$${gcc_dir}"
	tar -xf $(location @infinitime-nrfsdk//:src-tar) --strip-components "$${strip_components}" -C "$${nrfsdk_dir}"
	#find "$${gcc_dir}/bin" -executable
	$(location :mcuboot-venv-shell) "$${cmake_path}" \
            -G "Unix Makefiles" \
            -S "$${src_dir}" \
            -B "$${build_dir}" \
            -DCMAKE_BUILD_TYPE="$${build_type}" \
            -DARM_NONE_EABI_TOOLCHAIN_PATH="$${gcc_dir}" \
            -DNRF5_SDK_PATH="$${nrfsdk_dir}" \
            -DBUILD_DFU=1 \
            -DBUILD_RESOURCES=1  
	$(location :mcuboot-venv-shell) "$${cmake_path}" \
            --build "$${build_dir}" \
            --config "$${build_type}"
    """,
)
