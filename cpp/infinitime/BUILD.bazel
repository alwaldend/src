load("@aspect_rules_js//js:defs.bzl", "js_binary", "js_run_binary")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@bazel_skylib//rules/directory:directory.bzl", "directory")
load("@infinitime-venv//:requirements.bzl", "all_requirements")
load("@rules_python//python:py_binary.bzl", "py_binary")
load("@rules_python//python:py_library.bzl", "py_library")
load("@rules_python//python/entry_points:py_console_script_binary.bzl", "py_console_script_binary")
load("//bazel/macros:utils.bzl", "pkg_tar_combined", "py_binary_shell", "combine_files", "compile_pip_requirements_combined")

compile_pip_requirements_combined(
    name = "requirements",
    srcs = ["requirements.txt"] + select({
        "//bazel/configs:use-local-repos": ["@infinitime-src-local//:requirements"],
        "//conditions:default": ["@infinitime-src//:requirements"],
    }),
    requirements_txt = "requirements-lock.txt",
    visibility = ["//visibility:public"],
)

py_console_script_binary(
    name = "adafruit-nrfutil",
    pkg = "@infinitime-venv//adafruit_nrfutil",
)

py_binary_shell(
    name = "python-shell",
    deps = all_requirements + select({
        "//bazel/configs:use-local-repos": ["@infinitime-src-local//:imgtool"],
        "//conditions:default": ["@infinitime-src//:imgtool"],
    }),
)

pkg_tar_combined(
    name = "firmware-deps-remote",
    tars = [
        {
            "label": "@infinitime-src//:src-tar",
            "dir": "src",
        },
        {
            "label": "@infinitime-gcc//:src-tar",
            "dir": "gcc",
        },
        {
            "label": "@infinitime-nrfsdk//:src-tar",
            "dir": "nrfsdk",
        },
    ],
)

pkg_tar_combined(
    name = "firmware-deps-local",
    tars = [
        {
            "label": "@infinitime-src-local//:src-tar",
            "dir": "src",
        },
        {
            "label": "@infinitime-gcc//:src-tar",
            "dir": "gcc",
        },
        {
            "label": "@infinitime-nrfsdk//:src-tar",
            "dir": "nrfsdk",
        },
    ],
)

genrule(
    name = "infinitime",
    srcs = select({
        "//bazel/configs:use-local-repos": [":firmware-deps-local"],
        "//conditions:default": [":firmware-deps-remote"],
    }),
    tools = [
        ":python-shell",
        ":adafruit-nrfutil",
        "//javascript:node_modules/lv_font_conv/dir",
    ],
    toolchains = [
        "@rules_foreign_cc//toolchains:current_cmake_toolchain",
        "@nodejs_toolchains//:resolved_toolchain",
        "@rules_python//python:current_py_toolchain",
    ],
    outs = ["firmware.tar"],
    cmd = """
        set -euxo pipefail
	build_type="Release"
	build_dir="/tmp/bazel/$$(whoami)/cpp/infinitime/firmware/build"
	deps_dir="/tmp/bazel/$$(whoami)/cpp/infinitime/firmware/deps"
	bin_dir="$${PWD}/bin"
	src_dir="$${deps_dir}/src"
        gcc_dir="$${deps_dir}/gcc"
        nrfsdk_dir="$${deps_dir}/nrfsdk"
        export BAZEL_PYTHON_SHELL_TYPE=bash
	export PATH="$${bin_dir}:$${PWD}/$$(dirname $(NODE_PATH)):$${PWD}/$$(dirname $(PYTHON3)):$${gcc_dir}/bin:$${nrfsdk_dir}/bin:$${PATH}"

	mkdir -p "$${bin_dir}" "$${build_dir}" "$${deps_dir}"
        ln -s "$${PWD}/$(execpath //javascript:node_modules/lv_font_conv/dir)/lv_font_conv.js" "$${bin_dir}/lv_font_conv"
        ln -s "$${PWD}/$(execpath :adafruit-nrfutil)" "$${bin_dir}/adafruit-nrfutil"
        rm -rf "$${deps_dir}"/*
	tar -xf "$$(find -name "firmware-deps-*" -print -quit)" -C "$${deps_dir}"
	$(location :python-shell) $(CMAKE) \
            -G "Unix Makefiles" \
            -S "$${src_dir}" \
            -B "$${build_dir}" \
            -DCMAKE_BUILD_TYPE="$${build_type}" \
            -DARM_NONE_EABI_TOOLCHAIN_PATH="$${gcc_dir}" \
            -DNRF5_SDK_PATH="$${nrfsdk_dir}" \
            -DBUILD_DFU=1 \
            -DBUILD_RESOURCES=1
	$(location :python-shell) $(CMAKE) \
            --build "$${build_dir}" \
            --config "$${build_type}" \
            --target pinetime-mcuboot-app
        mkdir output
        find "$${build_dir}" -name "*.zip" -exec cp "{}" "output/" ";"
        tar -cf "$(@)" -C output .
    """,
)
