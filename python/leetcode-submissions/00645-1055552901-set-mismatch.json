{
    "id": 1055552901,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 645,
    "title_slug": "set-mismatch",
    "code": "class Solution:\n    def findErrorNums(self, nums: List[int]) -\u003e List[int]:\n        n = len(nums)\n        dupl_xor_miss = 0\n        for i in range(1, n+1):\n            dupl_xor_miss ^= i ^ nums[i-1]\n        \n        # example for get rightmost set bit\n        # x:             01110000\n        # ~x:            10001111\n        # -x or ~x + 1:  10010000\n        # x \u0026 -x:        00010000\n\n        # example for unset rightmost set bit\n        # x:             01110000\n        # x-1:           01101111\n        # x \u0026 (x-1):     01100000\n        rightmost_set_bit = dupl_xor_miss \u0026 -dupl_xor_miss\n        xor_group1 = xor_group2 = 0\n        for i in range(1, n + 1):\n            if i \u0026 rightmost_set_bit:\n                xor_group1 ^= i\n            else:\n                xor_group2 ^= i\n            if nums[i-1] \u0026 rightmost_set_bit:\n                xor_group1 ^= nums[i-1]\n            else:\n                xor_group2 ^= nums[i-1]\n        \n        for num in nums:\n            if num == xor_group1:\n                return [num, xor_group2]\n            if num == xor_group2:\n                return [num, xor_group1]\n\n        return []",
    "title": "Set Mismatch",
    "url": "/submissions/detail/1055552901/",
    "lang_name": "Python3",
    "time": "1 year, 7 months",
    "timestamp": 1695312694,
    "status": 10,
    "runtime": "197 ms",
    "is_pending": "Not Pending",
    "memory": "17.6 MB",
    "compare_result": "1111111111111111111111111111111111111111111111111",
    "flag_type": 1
}