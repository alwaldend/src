{
    "id": 1037006695,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 130,
    "title_slug": "surrounded-regions",
    "code": "class Solution:\n    def solve(self, board: List[List[str]]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        row_count, col_count = len(board), len(board[0])\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        ignore_cells = set()\n\n        def bfs(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                return\n            if (row, col) in ignore_cells or board[row][col] == \"X\":\n                return\n\n            ignore_cells.add((row, col))\n            for row_delta, col_delta in moves:\n                bfs(row + row_delta, col + col_delta)\n        \n        for row, col in itertools.chain(\n            ((0, col) for col in range(col_count)),\n            ((row_count - 1, col) for col in range(col_count)),\n            ((row, 0) for row in range(row_count)),\n            ((row, col_count - 1) for row in range(row_count))\n        ):\n            bfs(row, col)\n        \n        for row in range(1, row_count - 1):\n            for col in range(1, col_count - 1):\n                if (row, col) in ignore_cells:\n                    continue\n\n                board[row][col] = \"X\"\n        ",
    "title": "Surrounded Regions",
    "url": "/submissions/detail/1037006695/",
    "lang_name": "Python3",
    "time": "1 year, 8 months",
    "timestamp": 1693503352,
    "status": 10,
    "runtime": "142 ms",
    "is_pending": "Not Pending",
    "memory": "18.3 MB",
    "compare_result": "1111111111111111111111111111111111111111111111111111111111",
    "flag_type": 1
}