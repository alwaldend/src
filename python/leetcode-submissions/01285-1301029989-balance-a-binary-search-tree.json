{
    "id": 1301029989,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 1285,
    "title_slug": "balance-a-binary-search-tree",
    "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def balanceBST(self, root: TreeNode) -\u003e TreeNode:\n        self.sortedArr = []\n        self.inorderTraverse(root)\n        return self.sortedArrayToBST(0, len(self.sortedArr) - 1)\n\n    def inorderTraverse(self, root: TreeNode) -\u003e None:\n        if not root:\n            return\n        self.inorderTraverse(root.left)\n        self.sortedArr.append(root)\n        self.inorderTraverse(root.right)\n\n    def sortedArrayToBST(self, start: int, end: int) -\u003e TreeNode:\n        if start \u003e end:\n            return None\n        mid = (start + end) // 2\n        root = self.sortedArr[mid]\n        root.left = self.sortedArrayToBST(start, mid - 1)\n        root.right = self.sortedArrayToBST(mid + 1, end)\n        return root        ",
    "title": "Balance a Binary Search Tree",
    "url": "/submissions/detail/1301029989/",
    "lang_name": "Python3",
    "time": "10 months, 2 weeks",
    "timestamp": 1719416354,
    "status": 10,
    "runtime": "176 ms",
    "is_pending": "Not Pending",
    "memory": "20.2 MB",
    "compare_result": "11111111111111111",
    "flag_type": 1
}