{
    "id": 1154381353,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 1360,
    "title_slug": "maximum-length-of-a-concatenated-string-with-unique-characters",
    "code": "class Solution:\n    def maxLength(self, arr: List[str]) -\u003e int:\n        cur = set()\n        length = len(arr)\n        max_length = 0\n\n        def backtrack(start: int) -\u003e None:\n            nonlocal max_length \n            \n            for i in range(start, length):\n                new_subs = arr[i]\n                new = set(new_subs)\n                if len(new_subs) != len(new) or len(cur.intersection(new)) != 0:\n                    continue\n                cur.update(new)\n                backtrack(i + 1)\n                cur.difference_update(new)\n\n            max_length = max(max_length, len(cur))\n\n        backtrack(0)\n\n        return max_length\n",
    "title": "Maximum Length of a Concatenated String with Unique Characters",
    "url": "/submissions/detail/1154381353/",
    "lang_name": "Python3",
    "time": "1 year, 3 months",
    "timestamp": 1705996478,
    "status": 10,
    "runtime": "60 ms",
    "is_pending": "Not Pending",
    "memory": "16.7 MB",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "flag_type": 1
}