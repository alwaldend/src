{
    "id": 1016005207,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 221,
    "title_slug": "maximal-square",
    "code": "class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -\u003e int:\n        row_count, column_count = len(matrix), len(matrix[0])\n        \n        dp = [[0] * column_count for _ in range(row_count)]\n        \n        max_size = 0\n        for column in range(column_count):\n            if matrix[0][column] == \"0\":\n                continue\n            dp[0][column] = 1\n            max_size = 1\n\n        for row in range(row_count):\n            if matrix[row][0] == \"0\":\n                continue\n            dp[row][0] = 1\n            max_size = 1\n        \n        for row in range(1, row_count):\n            for column in range(1, column_count):\n                if matrix[row][column] == \"0\":\n                    continue\n                \n                value = min(dp[row-1][column], dp[row][column-1], dp[row-1][column-1]) + 1\n                dp[row][column] = value\n                max_size = max(max_size, value)\n        \n        return max_size * max_size\n",
    "title": "Maximal Square",
    "url": "/submissions/detail/1016005207/",
    "lang_name": "Python3",
    "time": "1 year, 9 months",
    "timestamp": 1691524596,
    "status": 10,
    "runtime": "584 ms",
    "is_pending": "Not Pending",
    "memory": "19.1 MB",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "flag_type": 1
}