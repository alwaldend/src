{
    "id": 1083730897,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 211,
    "title_slug": "design-add-and-search-words-data-structure",
    "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_word = False\n\nclass WordDictionary:\n\n    def __init__(self):\n        self.root = TrieNode()\n\n    def addWord(self, word: str) -\u003e None:\n        cur = self.root\n        for char in word:\n            cur = cur.children.setdefault(char, TrieNode())\n        cur.is_word = True\n\n    def search(self, word: str) -\u003e bool:\n        cur, nxt = [self.root], []\n        \n        for char in word:\n            if not cur:\n                return False\n\n            if char == \".\":\n                for node in cur:\n                    nxt.extend(node.children.values())\n            else:\n                for node in cur:\n                    if char in node.children:\n                        nxt.append(node.children[char]) \n                \n            cur.clear()\n            cur, nxt = nxt, cur\n\n        return any(node.is_word for node in cur)\n            \n\n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)",
    "title": "Design Add and Search Words Data Structure",
    "url": "/submissions/detail/1083730897/",
    "lang_name": "Python3",
    "time": "1 year, 6 months",
    "timestamp": 1698230259,
    "status": 10,
    "runtime": "2418 ms",
    "is_pending": "Not Pending",
    "memory": "80.1 MB",
    "compare_result": "11111111111111111111111111111",
    "flag_type": 1
}