load("@aspect_rules_lint//format:defs.bzl", "format_multirun")
load("@com_alwaldend_src_npm//:defs.bzl", "npm_link_all_packages")
load("@rules_perl//perl/cpan:cpan_compiler.bzl", "cpan_compiler")
load("//tools/bzl:al_alias_map.bzl", "al_alias_map")
load("//tools/bzl:al_bzl_library_map.bzl", "al_bzl_library_map")
load("//tools/bzl:al_bzl_target_doc.bzl", "al_bzl_target_doc")

npm_link_all_packages(
    name = "node_modules",
)

al_bzl_library_map(
    name = "stardoc",
    visibility = ["//:__subpackages__"],
    deps = [
        "//tools/{}:{}".format(package, "libs")
        for package in subpackages(
            include = ["*"],
            exclude = [
                "stylua",
                "shfmt",
                "prettier",
                "postcss",
                "dnscontrol",
                "cloc",
                "black",
                "isort",
                "mypy",
                "black",
                "flake8",
                "git_filter_repo",
                "twine",
                "replace_section",
                "file_installer",
                "git_hooks",
                "pnpm",
                "tomlv",
                "readme_tree",
            ],
        )
    ],
)

cpan_compiler(
    name = "cpan_lock",
    cpanfile = ":cpanfile",
    lockfile = ":cpanfile.snapshot.lock.json",
)

format_multirun(
    name = "format",
    go = "@aspect_rules_lint//format:gofumpt",
)

al_bzl_target_doc(
    name = "bazel_target_doc",
    visibility = ["//:__subpackages__"],
)
