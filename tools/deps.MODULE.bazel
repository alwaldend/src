GCC_ARM_VERSION = "10.3-2021.10"

al_repo_map = use_extension("//bzl/rules/repo_map:al_repo_map.bzl", "al_repo_map")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

git_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

local_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:local.bzl", "local_repository")

## Rust

crate = use_extension("@rules_rust//crate_universe:extensions.bzl", "crate")
crate.from_cargo(
    name = "com_alwaldend_src_cargo_tools",
    cargo_lockfile = "//tools:Cargo.lock",
    generate_binaries = True,
    manifests = [
        "//tools:Cargo.toml",
    ],
)
use_repo(crate, "com_alwaldend_src_cargo_tools")

## Haskell

stack_snapshot = use_extension(
    "@rules_haskell//extensions:stack_snapshot.bzl",
    "stack_snapshot",
)
stack_snapshot.stack_snapshot_json(
    label = "//tools:stackage_snapshot.json",
)
stack_snapshot.snapshot(
    local_snapshot = "//tools:stackage_snapshot.yaml",
)
stack_snapshot.package(
    name = "ShellCheck",
    components = [
        "lib",
        "exe:shellcheck",
    ],
)
use_repo(
    stack_snapshot,
    com_alwaldend_src_stackage_tools = "stackage",
    com_alwaldend_src_stackage_tools_exe = "stackage-exe",
    com_alwaldend_src_stackage_tools_unpinned = "stackage-unpinned",
)

## Perl

cpan = use_extension("@rules_perl//perl/cpan:extensions.bzl", "cpan")
cpan.install(
    name = "com_alwaldend_src_cpan_tools",
    lock = "//tools:cpanfile.snapshot.lock.json",
)
use_repo(cpan, "com_alwaldend_src_cpan_tools")

## Drawio
al_repo_map.download(
    name = "com_github_jgraph_drawio_desktop",
    download_type = "http_file",
    executable = True,
    repos = {
        "linux_x86_64": [
            "url=https://github.com/jgraph/drawio-desktop/releases/download/v27.0.9/drawio-x86_64-27.0.9.AppImage",
            "integrity=sha256-m4fBtXU61p2dovR3pUVSalbJ+8jIsE8ko3IQdKFHtiY=",
        ],
    },
)
use_repo(
    al_repo_map,
    "com_github_jgraph_drawio_desktop_linux_x86_64",
)

## Hugo
al_repo_map.download(
    name = "com_github_gohugoio_hugo",
    build_file_native_binary = {"src": "hugo"},
    repos = {
        "linux_amd64": [
            "url=https://github.com/gohugoio/hugo/releases/download/v{version}/hugo_extended_{version}_linux-amd64.tar.gz".format(version = "0.151.2"),
            "integrity=sha256-YrfVSXpqdjFaxchXDUY9o30UTtzERgF32j32C7yoXSo=",
        ],
    },
)
use_repo(
    al_repo_map,
    "com_github_gohugoio_hugo_linux_amd64",
)

# GCC

http_archive(
    name = "com_arm_developer_gcc_arm",
    build_file = "//bzl/build_files:general.BUILD.bazel",
    integrity = "sha256-l9u08BmtFlC3Mvr/zIgWic7cFOK37oY9OQ4KQe8WyaM=",
    strip_prefix = "gcc-arm-none-eabi-10.3-2021.10",
    url = "https://developer.arm.com/-/media/Files/downloads/gnu-rm/{version}/{name}-{version}-{platform}.tar.bz2".format(
        name = "gcc-arm-none-eabi",
        machine = "arm64",
        platform = "x86_64-linux",
        version = GCC_ARM_VERSION,
    ),
)

# Qt
http_archive(
    name = "com_alwaldend_src_qt",
    build_file = "//bzl/build_files:general.BUILD.bazel",
    integrity = "sha256-T2HlBVHQAEpRP++9sKQQWV2UgSpIYAZG+3NB6g0X4cs=",
    strip_prefix = "qt-everywhere-src-6.9.0",
    urls = ["https://download.qt.io/official_releases/qt/6.9/6.9.0/single/qt-everywhere-src-6.9.0.tar.xz"],
)

# Infinitime

git_repository(
    name = "com_github_infinitimeorg_infinitime",
    commit = "2105a7b63da8d4065ebfc62e0057f225358eedfc",  # 1.15.0
    init_submodules = True,
    patch_args = ["-p1"],
    patches = [
        "//patch/github.com/infinitimeorg/infinitime:001-add-BUILD.bazel.patch",
        "//patch/github.com/infinitimeorg/infinitime:002-modify-30-minute-chimes-interval.patch",
        "//patch/github.com/infinitimeorg/infinitime:003-add-WatchFaceTerminalCustom.patch",
    ],
    recursive_init_submodules = True,
    remote = "https://github.com/InfiniTimeOrg/InfiniTime.git",
    shallow_since = "1733253068 +0100",
)

# Uncomment to use the local infinitime repository
# local_repository(
#     name = "com_github_infinitimeorg_infinitime",
#     path = "~/Git/github.com/infinitimeorg/infinitime",
# )
