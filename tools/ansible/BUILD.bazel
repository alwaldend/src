load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python//python/entry_points:py_console_script_binary.bzl", "py_console_script_binary")
load("//tools/ansible:al_ansible_scripts.bzl", "AL_ANSIBLE_SCRIPTS")
load("//tools/bzl:al_bzl_library_map.bzl", "al_bzl_library_map")
load("//tools/docs:al_docs_files.bzl", "al_docs_files")

al_bzl_library_map(
    name = "libs",
    libs = {
        "al_ansible_binary": [
            "@rules_pkg//pkg:bzl_srcs",
            "@bazel_skylib//lib:shell",
            ":al_ansible_scripts",
        ],
        "al_ansible_role": [
            "@rules_pkg//pkg:bzl_srcs",
            "@bazel_skylib//rules:write_file",
            "@bazel_skylib//lib:paths",
        ],
        "al_ansible_scripts": [],
    },
    visibility = ["//:__subpackages__"],
)

compile_pip_requirements(
    name = "requirements",
    srcs = [":requirements.in.txt"],
    requirements_txt = ":requirements.txt",
)

[
    py_console_script_binary(
        name = script,
        pkg = "@com_alwaldend_src_bzl_rules_ansible_pip//ansible_core:pkg",
        script = script.replace("_", "-"),
        visibility = ["//:__subpackages__"],
    )
    for script in AL_ANSIBLE_SCRIPTS
]

al_docs_files(
    name = "docs",
    srcs = glob(["*.md"]),
    prefix = package_name(),
    visibility = ["//tools:__pkg__"],
    deps = [":libs.stardoc"],
)
