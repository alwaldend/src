load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python//python/entry_points:py_console_script_binary.bzl", "py_console_script_binary")
load("//tools/bzl:al_bzl_library_map.bzl", "al_bzl_library_map")
load("//tools/bzl:al_bzl_target_doc.bzl", "al_bzl_target_doc")

_SCRIPTS = [
    "ansible",
    "ansible-config",
    "ansible-console",
    "ansible-doc",
    "ansible-galaxy",
    "ansible-inventory",
    "ansible-playbook",
    "ansible-pull",
    "ansible-test",
    "ansible-vault",
]

al_bzl_library_map(
    name = "libs",
    libs = {
        "al_ansible_binary": [
            "@rules_pkg//pkg:bzl_srcs",
            "@bazel_skylib//lib:shell",
        ],
        "al_ansible_role": [
            "@rules_pkg//pkg:bzl_srcs",
            "@bazel_skylib//rules:write_file",
            "@bazel_skylib//lib:paths",
        ],
    },
    visibility = ["//:__subpackages__"],
)

compile_pip_requirements(
    name = "requirements",
    srcs = [":requirements.in.txt"],
    requirements_txt = ":requirements.txt",
)

[
    py_console_script_binary(
        name = script.replace("-", "_"),
        pkg = "@com_alwaldend_src_bzl_rules_ansible_pip//ansible_core:pkg",
        script = script,
        visibility = ["//:__subpackages__"],
    )
    for script in _SCRIPTS
]

al_bzl_target_doc(
    name = "bazel_target_doc",
    visibility = ["//:__subpackages__"],
)
