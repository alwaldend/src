load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("@bazel_skylib//rules/directory:directory.bzl", "directory")
load("@com_alwaldend_src_npm//:defs.bzl", "npm_link_all_packages")
load("@com_alwaldend_src_pip//:requirements.bzl", "all_whl_requirements")
load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier", "buildifier_test")
load("@gazelle//:def.bzl", "DEFAULT_LANGUAGES", "gazelle", "gazelle_binary")
load("@hedron_compile_commands//:refresh_compile_commands.bzl", "refresh_compile_commands")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python_gazelle_plugin//manifest:defs.bzl", "gazelle_python_manifest")
load("@rules_python_gazelle_plugin//modules_mapping:def.bzl", "modules_mapping")
load("//tools/docs:al_docs_files.bzl", "al_docs_files")
load("//tools/git:al_git_library.bzl", "al_git_library")
load("//tools/md:al_md_data.bzl", "al_md_data")
load("//tools/shell_worker:al_genrule.bzl", "al_genrule")
load("//tools/toml:al_toml_data.bzl", "al_toml_data")
load("//tools/txt:al_txt_data.bzl", "al_txt_data")

al_docs_files(
    name = "docs",
    srcs = [":LICENSE.txt"],
    renames = {},
    visibility = ["//projects/alwaldend.com/content/docs:__pkg__"],
    deps = [
        "//contracts:docs",
        "//infra:docs",
        "//projects:docs",
        "//third_party:docs",
        "//tools:docs",
    ],
)

exports_files(["LICENSE.txt"])

npm_link_all_packages(
    name = "node_modules",
)

gazelle_python_manifest(
    name = "gazelle_python_manifest",
    modules_mapping = ":modules_map",
    pip_repository_name = "com_alwaldend_src_pip",
    requirements = "//:requirements.txt",
)

modules_mapping(
    name = "modules_map",
    include_stub_packages = True,
    wheels = all_whl_requirements,
)

compile_pip_requirements(
    name = "requirements",
    timeout = "moderate",
    srcs = [":pyproject"],
    extra_args = ["--no-strip-extras"],
    requirements_txt = ":requirements.txt",
)

al_txt_data(
    name = "editorconfig",
    srcs = [".editorconfig"],
    visibility = ["//:__subpackages__"],
)

al_toml_data(
    name = "pyproject",
    srcs = ["pyproject.toml"],
    visibility = ["//:__subpackages__"],
)

buildifier(
    name = "buildifier",
)

buildifier_test(
    name = "buildifier_test",
    size = "small",
    no_sandbox = True,
    workspace = "//:BUILD.bazel",
)

# gazelle:java_maven_install_file projects/nexus_security_plugin/maven_lock.json
# gazelle:resolve java javax.annotation @com_alwaldend_src_maven//:org_apache_tomcat_annotations_api
# gazelle:resolve java org.joda.time @com_alwaldend_src_maven//:joda_time_joda_time
# gazelle:resolve java org.joda.time.format @com_alwandend_src_maven//:joda_time_joda_time
# gazelle:resolve java org.sonatype.nexus.repository.view @com_alwandend_src_maven//:org_sonatype_nexus_nexus_repository
# gazelle:resolve java org.sonatype.nexus.repository.storage @com_alwaldend_src_maven//:org_sonatype_nexus_nexus_repository
# gazelle:exclude **/leetcode-submissions/**
# gazelle:exclude **/mod_tidy_fix.go
gazelle(
    name = "gazelle",
    command = "fix",
    gazelle = ":gazelle_bin",
)

gazelle_binary(
    name = "gazelle_bin",
    languages = DEFAULT_LANGUAGES + [
        "@contrib_rules_jvm//java/gazelle",
        "@rules_python_gazelle_plugin//python:python",
    ],
    visibility = ["//:__subpackages__"],
)

refresh_compile_commands(
    name = "refresh_compile_commands",
    targets = {
        "//c/...": "",
    },
)

al_genrule(
    name = "update_readme",
    outs = ["update_readme_bin"],
    cmd = """
cat - >$(execpath :update_readme_bin) <<EOF
    #!/usr/bin/env bash
    set -euxo pipefail
    dir="\\${BUILD_WORKING_DIRECTORY}"
    replacement=\\$($(rootpath //tools/readme_tree) parse -C "\\${dir}" -e "md/docs/src" -g -o markdown .)
    $(rootpath //tools/replace_section) -i -s README_CONTENTS -r "\\${replacement}" "\\${dir}/README.md"
    exit
    replacement=\\$($(rootpath //tools/cloc) --md $(git -C "\\${dir}" ls-files | sed "s,/.*,/," | uniq | xargs -I "{}" echo "\\${dir}/{}"))
    $(rootpath //tools/replace_section) -i -s CLOC -r "\\${replacement}" "\\${dir}/README.md"
EOF
    """,
    executable = True,
    tools = [
        "//tools/cloc",
        "//tools/readme_tree",
        "//tools/replace_section",
    ],
)
