load("@aspect_bazel_lib//lib:directory_path.bzl", "directory_path")
load("@aspect_rules_js//js:defs.bzl", "js_binary", "js_library")
load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("@bazel_skylib//rules/directory:directory.bzl", "directory")
load("@com_alwaldend_src_npm//:defs.bzl", "npm_link_all_packages")
load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier", "buildifier_test")
load("@gazelle//:def.bzl", "DEFAULT_LANGUAGES", "gazelle", "gazelle_binary")
load("@hedron_compile_commands//:refresh_compile_commands.bzl", "refresh_compile_commands")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("//bzl/rules/bazel_shell_worker:al_genrule.bzl", "al_genrule")
load("//bzl/rules/bzl:al_bzl_target_doc.bzl", "al_bzl_target_doc")
load("//bzl/rules/git:al_git_changelog.bzl", "al_git_changelog")
load("//bzl/rules/git:al_git_library.bzl", "al_git_library")
load("//bzl/rules/md:al_md_data.bzl", "al_md_data")
load("//bzl/rules/toml:al_toml_data.bzl", "al_toml_data")
load("//bzl/rules/txt:al_txt_data.bzl", "al_txt_data")

_EXCLUDE = [
    "./.git/**/*",
    "bazel-*",
    "out",
    ".venv",
]

_SUBPACKAGES = subpackages(
    include = ["*"],
    allow_empty = True,
    exclude = _EXCLUDE,
)

exports_files(["LICENSE.txt"])

al_git_changelog(
    name = "changelog",
    subpackages = _SUBPACKAGES,
    visibility = ["//visibility:public"],
)

al_txt_data(
    name = "editorconfig",
    srcs = [".editorconfig"],
    visibility = ["//visibility:public"],
)

al_toml_data(
    name = "pyproject",
    srcs = ["pyproject.toml"],
    visibility = ["//visibility:public"],
)

buildifier(
    name = "buildifier",
    exclude_patterns = _EXCLUDE,
)

buildifier_test(
    name = "buildifier_test",
    size = "small",
    exclude_patterns = _EXCLUDE,
    no_sandbox = True,
    workspace = "//:BUILD.bazel",
)

npm_link_all_packages(
    name = "node_modules",
)

# gazelle:exclude **/leetcode-submissions/**
# gazelle:java_maven_install_file //java:maven_lock.json
# gazelle:resolve java javax.annotation @com_alwaldend_src_maven//:org_apache_tomcat_annotations_api
# gazelle:resolve java org.joda.time @com_alwaldend_src_maven//:joda_time_joda_time
# gazelle:resolve java org.joda.time.format @com_alwandend_src_maven//:joda_time_joda_time
# gazelle:resolve java org.sonatype.nexus.repository.view @com_alwandend_src_maven//:org_sonatype_nexus_nexus_repository
# gazelle:resolve java org.sonatype.nexus.repository.storage @com_alwaldend_src_maven//:org_sonatype_nexus_nexus_repository
# gazelle:exclude **/mod_tidy_fix.go
gazelle(
    name = "gazelle",
    command = "fix",
    gazelle = ":gazelle_bin",
)

gazelle_binary(
    name = "gazelle_bin",
    languages = DEFAULT_LANGUAGES + [
        "@contrib_rules_jvm//java/gazelle",
        "@rules_python_gazelle_plugin//python:python",
    ],
    visibility = ["//visibility:public"],
)

refresh_compile_commands(
    name = "refresh_compile_commands",
    targets = {
        "//c/...": "",
    },
)

al_genrule(
    name = "update_readme",
    outs = ["update_readme_bin"],
    cmd = """
cat - >$(execpath :update_readme_bin) <<EOF
    #!/usr/bin/env bash
    set -euxo pipefail
    dir="\\${BUILD_WORKING_DIRECTORY}"
    replacement=\\$($(rootpath //go/readme-tree) parse -C "\\${dir}" -e "md/docs/src" -g -o markdown .)
    $(rootpath //py/replace-section) -i -s README_CONTENTS -r "\\${replacement}" "\\${dir}/README.md"
    exit
    replacement=\\$($(rootpath //tools:cloc) --md $(git -C "\\${dir}" ls-files | sed "s,/.*,/," | uniq | xargs -I "{}" echo "\\${dir}/{}"))
    $(rootpath //py/replace-section) -i -s CLOC -r "\\${replacement}" "\\${dir}/README.md"
EOF
    """,
    executable = True,
    tools = [
        "//go/readme-tree",
        "//py/replace-section",
        "//tools:cloc",
    ],
)

al_bzl_target_doc(
    name = "bazel_target_doc",
    subpackages = _SUBPACKAGES,
    visibility = ["//visibility:public"],
)
