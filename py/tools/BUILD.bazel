load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python//python/entry_points:py_console_script_binary.bzl", "py_console_script_binary")
load("//bzl/rules/bzl:al_bzl_target_doc.bzl", "al_bzl_target_doc")
load("//bzl/rules/git:al_git_changelog.bzl", "al_git_changelog")
load("//bzl/rules/toml:al_toml_data.bzl", "al_toml_data")

al_git_changelog(
    name = "changelog",
    visibility = ["//:__subpackages__"],
)

exports_files(["requirements.txt"])

al_toml_data(
    name = "pyproject",
    srcs = ["pyproject.toml"],
    visibility = ["//:__subpackages__"],
)

PACKAGES = {
    "isort": {},
    "mypy": {},
    "black": {},
    "flake8": {"deps": ["@com_alwaldend_src_pip//flake8_pyproject:pkg"]},
    "git-filter-repo": {},
    "twine": {},
}

[
    py_console_script_binary(
        name = package,
        pkg = "@com_alwaldend_src_pip//{}:pkg".format(package.replace("-", "_")),
        visibility = ["//:__subpackages__"],
        deps = kwargs.get("deps", []),
    )
    for package, kwargs in PACKAGES.items()
]

compile_pip_requirements(
    name = "requirements",
    timeout = "moderate",
    srcs = [":pyproject"],
    extra_args = ["--no-strip-extras"],
    requirements_txt = ":requirements.txt",
)

al_bzl_target_doc(
    name = "bazel_target_doc",
    visibility = ["//:__subpackages__"],
)
