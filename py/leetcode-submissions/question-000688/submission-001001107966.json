{
    "id": 1001107966,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 688,
    "title_slug": "knight-probability-in-chessboard",
    "code": "class Solution:\n    # y x x\n    # x x x\n    # x x x: (2 / 8) * (4 / 16) = 0.0625\n    #        (1/8, 1/8), (2/8, 2/8)\n    # \n    # x x x\n    # x y x\n    # x x x: 0\n    def __init__(self):\n        self.available_moves = (\n            (2, 1), (1, 2), (-2, 1), (-1, 2), (2, -1), (1, -2), \n            (-2, -1), (-1, -2)\n        )\n    \n\n    def knightProbability(self, n: int, k: int, row: int, column: int) -\u003e float:\n        if k \u003c 1:\n            return 1\n        \n        if n \u003c 3:\n            return 0\n\n        return self.calculate(row, column, n, k)\n    \n    @cache\n    def calculate(self, row: int, column: int, size: int, \n                       moves_left: int) -\u003e float:\n       \n        if moves_left \u003c 1:\n            return 1\n\n        probability = 0\n\n        for row_add, column_add in self.available_moves:\n            new_row = row_add + row\n            new_column = column_add + column\n\n            if new_row \u003c 0 or new_row \u003e= size or (\n                new_column \u003c 0 or new_column \u003e= size\n            ):\n                continue\n\n            probability += self.calculate(\n                new_row, new_column, size, moves_left - 1\n            ) / 8\n\n        return probability",
    "title": "Knight Probability in Chessboard",
    "url": "/submissions/detail/1001107966/",
    "lang_name": "Python3",
    "time": "2Â years",
    "timestamp": 1690042140,
    "status": 10,
    "runtime": "268 ms",
    "is_pending": "Not Pending",
    "memory": "27.8 MB",
    "compare_result": "1111111111111111111111",
    "flag_type": 1
}