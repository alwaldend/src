{
    "id": 1015877410,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 64,
    "title_slug": "minimum-path-sum",
    "code": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -\u003e int:\n        row_count = len(grid)\n        column_count = len(grid[0]) if grid else None\n        if not row_count or not column_count:\n            return 0\n\n        dp = [[0] * column_count for _ in range(row_count)]\n        dp[0][0] = grid[0][0]\n\n        for column in range(1, column_count):\n            dp[0][column] = grid[0][column] + dp[0][column - 1]\n\n        for row in range(1, row_count):\n            dp[row][0] = grid[row][0] + dp[row - 1][0]\n\n            for column in range(1, column_count):\n                dp[row][column] = grid[row][column] + min(\n                    dp[row - 1][column], dp[row][column-1]\n                )\n\n        # @cache\n        # def dp(row: int, column: int) -\u003e int:\n        #     if row == row_count or column == column_count:\n        #         return 0\n        #     return grid[row][column] + min(dp(row + 1, column), dp(row, column + 1))\n        #return dp(0, 0)\n\n        return dp[-1][-1]",
    "title": "Minimum Path Sum",
    "url": "/submissions/detail/1015877410/",
    "lang_name": "Python3",
    "time": "1 year, 11 months",
    "timestamp": 1691515881,
    "status": 10,
    "runtime": "88 ms",
    "is_pending": "Not Pending",
    "memory": "18 MB",
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
    "flag_type": 1
}