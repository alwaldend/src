{
    "id": 1262198501,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 3307,
    "title_slug": "find-the-maximum-sum-of-node-values",
    "code": "class Solution:\n    def maximumValueSum(self, nums: list[int], k: int, edges: list[list[int]]) -\u003e int:\n        n: int = len(nums)\n        temp: list[list[int]] = [[-1 for _ in range(2)] for _ in range(n)]  # temp[current_index(node)][is_even]\n\n        def calculate_max(cur_ind, is_even) -\u003e int:  # cur_ind -\u003e cur_index of the tree and is_even represents whether we have already changed (XOR) even or odd number of nodes \n            if cur_ind == n:  # if we go to node which doesn't exist\n                return 0 if is_even else -float(\"inf\")\n            if temp[cur_ind][is_even] != -1:  # if we've already encountered this state\n                return temp[cur_ind][is_even]\n\n            # checking all possible variants (no XOR or XOR)\n            no_xor = nums[cur_ind] + calculate_max(cur_ind + 1, is_even)  # we don't change the number of XOR nodes\n            with_xor = (nums[cur_ind] ^ k) + calculate_max(cur_ind + 1, not is_even)  # we added 1 XORed node\n\n            mx_possible = max(no_xor, with_xor)\n            temp[cur_ind][is_even] = mx_possible\n            return mx_possible\n\n        return calculate_max(0, 1)  # is_even == 1 because we have XORed 0 nodes which is even",
    "title": "Find the Maximum Sum of Node Values",
    "url": "/submissions/detail/1262198501/",
    "lang_name": "Python3",
    "time": "11 months, 3 weeks",
    "timestamp": 1716120523,
    "status": 10,
    "runtime": "1131 ms",
    "is_pending": "Not Pending",
    "memory": "33.9 MB",
    "compare_result
    "flag_type": 1
}