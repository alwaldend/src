{
    "id": 1043209423,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 79,
    "title_slug": "word-search",
    "code": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -\u003e bool:\n        row_count, col_count = len(board), len(board[0])\n        word_length = len(word)\n        delta = ((0, 1), (0, -1), (1, 0), (-1, 0))\n\n        if word_length == 1:\n            return any(word in row for row in board)\n\n        def backtrack(row: int, col: int, visited: Set, target: int) -\u003e bool:\n            if (row, col) in visited or not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                return False\n\n            if board[row][col] != word[target]:\n                return False\n            \n            if target == word_length - 1:\n                return True\n\n            visited.add((row, col))\n            if any(backtrack(row + delta_row, col + delta_col, visited, target + 1)\n                   for delta_row, delta_col in delta):\n                return True\n            visited.remove((row, col))\n            return False\n        \n        start_char = word[0]\n\n        return any(backtrack(row, col, set(), 0) \n                   for row in range(row_count) \n                   for col in range(col_count)\n                   if board[row][col] == start_char)",
    "title": "Word Search",
    "url": "/submissions/detail/1043209423/",
    "lang_name": "Python3",
    "time": "1 year, 10 months",
    "timestamp": 1694106009,
    "status": 10,
    "runtime": "9144 ms",
    "is_pending": "Not Pending",
    "memory": "16.4 MB",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "flag_type": 1
}