{
    "id": 1057809299,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 173,
    "title_slug": "binary-search-tree-iterator",
    "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator:\n\n    def __init__(self, root: Optional[TreeNode]):\n        def generate(node: TreeNode) -\u003e int:\n            if not node:\n                return\n            yield from generate(node.left)\n            yield node\n            yield from generate(node.right)\n\n        self._generate = generate(root)\n        self._next = next(self._generate)\n\n    def next(self) -\u003e int:\n        next_val = self._next.val\n        self._next = next(self._generate, None)\n        return next_val \n\n    def hasNext(self) -\u003e bool:\n        return self._next is not None\n\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()",
    "title": "Binary Search Tree Iterator",
    "url": "/submissions/detail/1057809299/",
    "lang_name": "Python3",
    "time": "1 year, 7 months",
    "timestamp": 1695549403,
    "status": 10,
    "runtime": "76 ms",
    "is_pending": "Not Pending",
    "memory": "22.9 MB",
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
    "flag_type": 1
}