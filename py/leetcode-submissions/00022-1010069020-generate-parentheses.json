{
    "id": 1010069020,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 22,
    "title_slug": "generate-parentheses",
    "code": "class Solution:\n    def generateParenthesis(self, n: int) -\u003e List[str]:\n\n        current = []\n        current_max = n * 2\n        chars = \"()\"\n\n\n        def backtrack(open: int, closed: int) -\u003e Generator[None, None, List[str]]:\n            if len(current) == current_max:\n                yield \"\".join(current)\n            \n            if open:\n                current.append(chars[0])\n                yield from backtrack(open - 1, closed)\n                current.pop()\n            \n            if closed and closed \u003e open:\n                current.append(chars[1])\n                yield from backtrack(open, closed - 1)\n                current.pop()\n        \n        return tuple(combination for combination in backtrack(n, n))",
    "title": "Generate Parentheses",
    "url": "/submissions/detail/1010069020/",
    "lang_name": "Python3",
    "time": "1 year, 9 months",
    "timestamp": 1690961956,
    "status": 10,
    "runtime": "42 ms",
    "is_pending": "Not Pending",
    "memory": "16.6 MB",
    "compare_result": "11111111",
    "flag_type": 1
}