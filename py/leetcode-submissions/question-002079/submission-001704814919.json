{
    "id": 1704814919,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 2079,
    "title_slug": "delete-duplicate-folders-in-system",
    "code": "class Trie:\n    serial: str = \"\"\n    children: dict[str, \"Trie\"]\n\n    def __init__(self) -\u003e None:\n        self.children = dict()\n\n\nclass Solution:\n    def deleteDuplicateFolder(self, paths: List[List[str]]) -\u003e List[List[str]]:\n        root = Trie()\n        freq = Counter()\n\n        for path in paths:\n            cur = root\n            for node in path:\n                if node not in cur.children:\n                    cur.children[node] = Trie()\n                cur = cur.children[node]\n\n        \n        def construct(node: Trie) -\u003e None:\n            if not node.children:\n                return\n\n            serial: list[str] = []\n            for folder, child in node.children.items():\n                construct(child)\n                serial.append(f\"{folder}({child.serial})\")\n\n            serial.sort()\n            node.serial = \"\".join(serial)\n            freq[node.serial] += 1\n\n        construct(root)\n\n        ans = list()\n        path = list()\n\n        def operate(node: Trie) -\u003e None:\n            if freq[node.serial] \u003e 1:\n                return\n            if path:\n                ans.append(path[:])\n\n            for folder, child in node.children.items():\n                path.append(folder)\n                operate(child)\n                path.pop()\n\n        operate(root)\n        return ans",
    "title": "Delete Duplicate Folders in System",
    "url": "/submissions/detail/1704814919/",
    "lang_name": "Python3",
    "time": "6 days, 1 hour",
    "timestamp": 1753019608,
    "status": 10,
    "runtime": "177 ms",
    "is_pending": "Not Pending",
    "memory": "48 MB",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "flag_type": 1
}