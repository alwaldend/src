{
    "id": 997558323,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 155,
    "title_slug": "min-stack",
    "code": "from sortedcontainers import sortedset\n\nclass MinStack:\n    class Node:\n        def __init__(self, val: int, prev: 'Node'):\n            self.val = val\n            self.prev = prev\n\n\n    def __init__(self):\n        self.stack: List[Node] = []\n        self.min_node = None\n\n    def push(self, val: int) -\u003e None:\n        new_node = self.Node(val, None)\n        self.stack.append(new_node)\n        if self.min_node is None or val \u003c= self.min_node.val:\n            new_node.prev = self.min_node\n            self.min_node = new_node\n\n    def pop(self) -\u003e None:\n        pop = self.stack.pop()\n        if pop == self.min_node:\n            self.min_node = self.min_node.prev\n\n    def top(self) -\u003e int:\n        return self.stack[-1].val\n\n    def getMin(self) -\u003e int:\n        return self.min_node.val\n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()",
    "title": "Min Stack",
    "url": "/submissions/detail/997558323/",
    "lang_name": "Python3",
    "time": "2Â years",
    "timestamp": 1689684365,
    "status": 10,
    "runtime": "84 ms",
    "is_pending": "Not Pending",
    "memory": "21.6 MB",
    "compare_result": "1111111111111111111111111111111",
    "flag_type": 1
}