{
    "id": 1050221160,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 838,
    "title_slug": "design-linked-list",
    "code": "class Node:\n    def __init__(self, val: int = 0, prev_node: 'Node' = None, next_node: 'Node' = None):\n        self.val, self.prev, self.next = val, prev_node, next_node\n\nclass MyLinkedList:\n\n    def __init__(self):\n        self._head, self._tail = Node(float(\"-inf\")), Node(float(\"inf\"))\n        self._head.next, self._tail.prev = self._tail, self._head\n        self._length = 0\n\n    def _getNode(self, index: int) -\u003e Node:\n        if not 0 \u003c= index \u003c self._length:\n            return None\n        if index == 0:\n            return self._head.next\n        if index == self._length - 1:\n            return self._tail.prev\n\n        cur_idx, cur_node = 0, self._head.next\n        while cur_idx \u003c index:\n            cur_node = cur_node.next\n            cur_idx += 1\n\n        return cur_node\n    \n    def get(self, index: int) -\u003e int:\n        node = self._getNode(index)\n        return node.val if node else -1\n\n    def addAtHead(self, val: int) -\u003e None:\n        old_first = self._head.next\n        new_node = Node(val, self._head, old_first)\n        self._head.next, old_first.prev = new_node, new_node\n        self._length += 1\n\n    def addAtTail(self, val: int) -\u003e None:\n        old_tail = self._tail.prev\n        new_node = Node(val, old_tail, self._tail)\n        self._tail.prev, old_tail.next = new_node, new_node\n        self._length += 1\n\n    def addAtIndex(self, index: int, val: int) -\u003e None:\n        if not 0 \u003c= index \u003c= self._length:\n            return\n        if index == 0:\n            self.addAtHead(val)\n            return\n        if index == self._length:\n            self.addAtTail(val)\n            return\n        \n        target_node = self._getNode(index)\n        prev_node = target_node.prev\n        new_node = Node(val, prev_node, target_node)\n        prev_node.next, target_node.prev = new_node, new_node\n        self._length += 1\n\n    def deleteAtIndex(self, index: int) -\u003e None:\n        if not 0 \u003c= index \u003c self._length:\n            return\n        \n        target_node = self._getNode(index)\n        old_prev, old_next = target_node.prev, target_node.next\n        old_prev.next, old_next.prev = old_next, old_prev\n        self._length -= 1\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)",
    "title": "Design Linked List",
    "url": "/submissions/detail/1050221160/",
    "lang_name": "Python3",
    "time": "1 year, 10 months",
    "timestamp": 1694793180,
    "status": 10,
    "runtime": "148 ms",
    "is_pending": "Not Pending",
    "memory": "17.9 MB",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111",
    "flag_type": 1
}