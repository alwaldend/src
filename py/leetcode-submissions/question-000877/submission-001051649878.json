{
    "id": 1051649878,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 877,
    "title_slug": "shortest-path-visiting-all-nodes",
    "code": "from collections import deque, namedtuple\n\nclass Solution:\n    def shortestPathLength(self, graph):\n        n = len(graph)\n        all_mask = (1 \u003c\u003c n) - 1\n        visited = set()\n        Node = namedtuple('Node', ['node', 'mask', 'cost'])\n\n        q = deque()\n        for i in range(n):\n            mask_value = (1 \u003c\u003c i)\n            this_node = Node(i, mask_value, 1)\n            q.append(this_node)\n            visited.add((i, mask_value))\n\n        while q:\n            curr = q.popleft()\n\n            if curr.mask == all_mask:\n                return curr.cost - 1\n\n            for adj in graph[curr.node]:\n                both_visited_mask = curr.mask | (1 \u003c\u003c adj)\n                this_node = Node(adj, both_visited_mask, curr.cost + 1)\n\n                if (adj, both_visited_mask) not in visited:\n                    visited.add((adj, both_visited_mask))\n                    q.append(this_node)\n\n        return -1\n",
    "title": "Shortest Path Visiting All Nodes",
    "url": "/submissions/detail/1051649878/",
    "lang_name": "Python3",
    "time": "1 year, 10 months",
    "timestamp": 1694940339,
    "status": 10,
    "runtime": "340 ms",
    "is_pending": "Not Pending",
    "memory": "21.4 MB",
    "compare_result": "111111111111111111111111111111111111111111111111111",
    "flag_type": 1
}