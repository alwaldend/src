{
    "id": 1010367344,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 820,
    "title_slug": "find-eventual-safe-states",
    "code": "class Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -\u003e List[int]:\n        length = len(graph)\n        indegree = [0] * length\n        adj = [[] for _ in range(length)]\n\n        for i in range(length):\n            for edge in graph[i]:\n                adj[edge].append(i)\n                indegree[i] += 1\n\n        q = deque()\n        # Push all the nodes with indegree zero in the queue.\n        for i in range(length):\n            if indegree[i] == 0:\n                q.append(i)\n\n        safe = [False] * length\n        while q:\n            node = q.popleft()\n            safe[node] = True\n\n            for neighbor in adj[node]:\n                # Delete the edge \"node -\u003e neighbor\".\n                indegree[neighbor] -= 1\n                if indegree[neighbor] == 0:\n                    q.append(neighbor)\n\n        safe_nodes = []\n        for i in range(length):\n            if safe[i]:\n                safe_nodes.append(i)\n\n        return safe_nodes",
    "title": "Find Eventual Safe States",
    "url": "/submissions/detail/1010367344/",
    "lang_name": "Python3",
    "time": "1 year, 12 months",
    "timestamp": 1690989105,
    "status": 10,
    "runtime": "601 ms",
    "is_pending": "Not Pending",
    "memory": "23.7 MB",
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "flag_type": 1
}