{
    "id": 1006808608,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 826,
    "title_slug": "soup-servings",
    "code": "class Solution:\n    def soupServings(self, n: int) -\u003e float:\n        servings = ceil(n / 25)\n\n        states = defaultdict(dict)\n        moves = [[-4, 0], [-3, -1], [-2, -2], [-1, -3]]\n    \n        @cache\n        def calculate(soup_a: int, soup_b: int) -\u003e float:\n            if soup_a \u003c= 0 and soup_b \u003c= 0:\n                return 0.5\n            if soup_a \u003c= 0:\n                return 1.0\n            if soup_b \u003c= 0:\n                return 0.0\n            if soup_a in states and soup_b in states[soup_a]:\n                return states[soup_a][soup_b]\n            \n            state = sum(calculate(soup_a + move[0], soup_b + move[1]) for move in moves) / 4.0\n            states[soup_a][soup_b] = state\n\n            return state\n\n        max_probability = 1 - 1e-5\n\n        for serving in range(1, servings + 1):\n            state = calculate(serving, serving)\n            if state \u003e max_probability:\n                return 1.0\n        \n        return calculate(servings, servings)\n       \n\n",
    "title": "Soup Servings",
    "url": "/submissions/detail/1006808608/",
    "lang_name": "Python3",
    "time": "2Â years",
    "timestamp": 1690626273,
    "status": 10,
    "runtime": "346 ms",
    "is_pending": "Not Pending",
    "memory": "40 MB",
    "compare_result": "11111111111111111111111111111111111111111",
    "flag_type": 1
}