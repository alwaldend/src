{
    "id": 1051646948,
    "status_display": "Accepted",
    "lang": "python3",
    "question_id": 208,
    "title_slug": "implement-trie-prefix-tree",
    "code": "class Node:\n    def __init__(self):\n        self.ch, self.is_word = [None] * 128, False\n\nclass Trie:\n\n    def __init__(self):\n        self.head = Node()\n\n    def insert(self, word: str) -\u003e None:\n        cur_node = self.head\n        for i in range(len(word)):\n            char = ord(word[i])\n            if cur_node.ch[char] is None:\n                cur_node.ch[char] = Node()\n            cur_node = cur_node.ch[char]\n        cur_node.is_word = True\n\n    def search(self, word: str) -\u003e bool:\n        cur_node = self.head\n        for i in range(len(word)):\n            char = ord(word[i])\n            if cur_node.ch[char] is None:\n                return False\n            cur_node = cur_node.ch[char]\n        \n        return cur_node.is_word\n\n    def startsWith(self, prefix: str) -\u003e bool:\n        cur_node = self.head\n        for i in range(len(prefix)):\n            char = ord(prefix[i])\n            if cur_node.ch[char] is None:\n                return False\n            cur_node = cur_node.ch[char]\n        \n        return True\n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)",
    "title": "Implement Trie (Prefix Tree)",
    "url": "/submissions/detail/1051646948/",
    "lang_name": "Python3",
    "time": "1 year, 10 months",
    "timestamp": 1694940001,
    "status": 10,
    "runtime": "297 ms",
    "is_pending": "Not Pending",
    "memory": "60.3 MB",
    "compare_result": "1111111111111111",
    "flag_type": 1
}