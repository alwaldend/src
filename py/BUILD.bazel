load("@com-alwaldend-src-pip//:requirements.bzl", "all_whl_requirements")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python//python/entry_points:py_console_script_binary.bzl", "py_console_script_binary")
load("@rules_python_gazelle_plugin//manifest:defs.bzl", "gazelle_python_manifest")
load("@rules_python_gazelle_plugin//modules_mapping:def.bzl", "modules_mapping")
load("//bzl/macros:al_bzl_target_doc.bzl", "al_bzl_target_doc")
load("//bzl/macros:al_gen_changelog.bzl", "al_gen_changelog")
load("//bzl/macros:al_readme.bzl", "al_readme")

PACKAGES = {
    "isort": {},
    "mypy": {},
    "black": {},
    "flake8": {"deps": ["@com-alwaldend-src-pip//flake8_pyproject:pkg"]},
    "git-filter-repo": {},
    "twine": {},
}

al_gen_changelog(
    name = "changelog",
    visibility = ["//visibility:public"],
)

exports_files(["requirements.txt"])

[
    py_console_script_binary(
        name = package,
        pkg = "@com-alwaldend-src-pip//{}:pkg".format(package.replace("-", "_")),
        visibility = ["//visibility:public"],
        deps = kwargs.get("deps", []),
    )
    for package, kwargs in PACKAGES.items()
]

compile_pip_requirements(
    name = "requirements",
    timeout = "moderate",
    srcs = ["//:pyproject"],
    requirements_txt = ":requirements.txt",
)

al_readme(
    name = "readme",
    visibility = ["//visibility:public"],
)

gazelle_python_manifest(
    name = "gazelle_python_manifest",
    modules_mapping = ":modules_map",
    pip_repository_name = "com-alwaldend-src-pip",
    requirements = "//py:requirements.txt",
)

modules_mapping(
    name = "modules_map",
    include_stub_packages = True,
    wheels = all_whl_requirements,
)

al_bzl_target_doc(
    name = "bzl-target-doc",
    visibility = ["//visibility:public"],
)
