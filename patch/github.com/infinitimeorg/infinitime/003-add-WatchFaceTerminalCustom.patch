diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 0a97a015..475ebfd0 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -424,6 +424,7 @@ list(APPEND SOURCE_FILES
         displayapp/screens/WatchFaceDigital.cpp
         displayapp/screens/WatchFaceInfineat.cpp
         displayapp/screens/WatchFaceTerminal.cpp
+        displayapp/screens/WatchFaceTerminalCustom.cpp
         displayapp/screens/WatchFacePineTimeStyle.cpp
         displayapp/screens/WatchFaceCasioStyleG7710.cpp
 
diff --git a/src/displayapp/UserApps.h b/src/displayapp/UserApps.h
index 67bbfa7d..6a6636aa 100644
--- a/src/displayapp/UserApps.h
+++ b/src/displayapp/UserApps.h
@@ -14,6 +14,7 @@
 #include "displayapp/screens/WatchFaceInfineat.h"
 #include "displayapp/screens/WatchFacePineTimeStyle.h"
 #include "displayapp/screens/WatchFaceTerminal.h"
+#include "displayapp/screens/WatchFaceTerminalCustom.h"
 
 namespace Pinetime {
   namespace Applications {
diff --git a/src/displayapp/apps/Apps.h.in b/src/displayapp/apps/Apps.h.in
index 2104a267..fd5ad21a 100644
--- a/src/displayapp/apps/Apps.h.in
+++ b/src/displayapp/apps/Apps.h.in
@@ -50,6 +50,7 @@ namespace Pinetime {
       Analog,
       PineTimeStyle,
       Terminal,
+      TerminalCustom,
       Infineat,
       CasioStyleG7710,
     };
diff --git a/src/displayapp/apps/CMakeLists.txt b/src/displayapp/apps/CMakeLists.txt
index d7858760..1f742825 100644
--- a/src/displayapp/apps/CMakeLists.txt
+++ b/src/displayapp/apps/CMakeLists.txt
@@ -27,6 +27,7 @@ else()
     set(DEFAULT_WATCHFACE_TYPES "${DEFAULT_WATCHFACE_TYPES}, WatchFace::Terminal")
     set(DEFAULT_WATCHFACE_TYPES "${DEFAULT_WATCHFACE_TYPES}, WatchFace::Infineat")
     set(DEFAULT_WATCHFACE_TYPES "${DEFAULT_WATCHFACE_TYPES}, WatchFace::CasioStyleG7710")
+    set(DEFAULT_WATCHFACE_TYPES "${DEFAULT_WATCHFACE_TYPES}, WatchFace::TerminalCustom")
     set(WATCHFACE_TYPES "${DEFAULT_WATCHFACE_TYPES}" CACHE STRING "List of watch faces to build into the firmware")
 endif()
 
diff --git a/src/displayapp/screens/WatchFaceTerminalCustom.cpp b/src/displayapp/screens/WatchFaceTerminalCustom.cpp
new file mode 100644
index 00000000..f5db2516
--- /dev/null
+++ b/src/displayapp/screens/WatchFaceTerminalCustom.cpp
@@ -0,0 +1,147 @@
+#include <lvgl/lvgl.h>
+#include "displayapp/screens/WatchFaceTerminalCustom.h"
+#include "displayapp/screens/BatteryIcon.h"
+#include "displayapp/screens/NotificationIcon.h"
+#include "displayapp/screens/Symbols.h"
+#include "components/battery/BatteryController.h"
+#include "components/ble/BleController.h"
+#include "components/ble/NotificationManager.h"
+#include "components/heartrate/HeartRateController.h"
+#include "components/motion/MotionController.h"
+#include "components/settings/Settings.h"
+
+using namespace Pinetime::Applications::Screens;
+
+WatchFaceTerminalCustom::WatchFaceTerminalCustom(Controllers::DateTime& dateTimeController,
+                                     const Controllers::Battery& batteryController,
+                                     const Controllers::Ble& bleController,
+                                     Controllers::NotificationManager& notificationManager,
+                                     Controllers::Settings& settingsController,
+                                     Controllers::HeartRateController& heartRateController,
+                                     Controllers::MotionController& motionController)
+  : currentDateTime {{}},
+    dateTimeController {dateTimeController},
+    batteryController {batteryController},
+    bleController {bleController},
+    notificationManager {notificationManager},
+    settingsController {settingsController},
+    heartRateController {heartRateController},
+    motionController {motionController} {
+  notificationIcon = lv_label_create(lv_scr_act(), nullptr);
+  lv_obj_align(notificationIcon, nullptr, LV_ALIGN_IN_LEFT_MID, 0, -100);
+
+  label_time = lv_label_create(lv_scr_act(), nullptr);
+  lv_obj_align(label_time, lv_scr_act(), LV_ALIGN_IN_LEFT_MID, 0, -80);
+
+  label_date = lv_label_create(lv_scr_act(), nullptr);
+  lv_obj_align(label_date, lv_scr_act(), LV_ALIGN_IN_LEFT_MID, 0, -60);
+
+  weekdayValue = lv_label_create(lv_scr_act(), nullptr);
+  lv_obj_align(weekdayValue, lv_scr_act(), LV_ALIGN_IN_LEFT_MID, 0, -40);
+
+  monthValue = lv_label_create(lv_scr_act(), nullptr);
+  lv_obj_align(monthValue, lv_scr_act(), LV_ALIGN_IN_LEFT_MID, 0, -20);
+
+  batteryValue = lv_label_create(lv_scr_act(), nullptr);
+  lv_obj_align(batteryValue, lv_scr_act(), LV_ALIGN_IN_LEFT_MID, 0, 0);
+
+  stepValue = lv_label_create(lv_scr_act(), nullptr);
+  lv_obj_align(stepValue, lv_scr_act(), LV_ALIGN_IN_LEFT_MID, 0, 20);
+
+  heartbeatValue = lv_label_create(lv_scr_act(), nullptr);
+  lv_obj_align(heartbeatValue, lv_scr_act(), LV_ALIGN_IN_LEFT_MID, 0, 40);
+
+  connectState = lv_label_create(lv_scr_act(), nullptr);
+  lv_obj_align(connectState, lv_scr_act(), LV_ALIGN_IN_LEFT_MID, 0, 60);
+
+  taskRefresh = lv_task_create(RefreshTaskCallback, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, this);
+  Refresh();
+}
+
+WatchFaceTerminalCustom::~WatchFaceTerminalCustom() {
+  lv_task_del(taskRefresh);
+  lv_obj_clean(lv_scr_act());
+}
+
+void WatchFaceTerminalCustom::Refresh() {
+  powerPresent = batteryController.IsPowerPresent();
+  batteryPercentRemaining = batteryController.PercentRemaining();
+  if (batteryPercentRemaining.IsUpdated() || powerPresent.IsUpdated()) {
+    lv_label_set_text_fmt(batteryValue, "charge: %d%%", batteryPercentRemaining.Get());
+    if (batteryController.IsPowerPresent()) {
+      lv_label_ins_text(batteryValue, LV_LABEL_POS_LAST, " charging");
+    }
+  }
+
+  bleState = bleController.IsConnected();
+  bleRadioEnabled = bleController.IsRadioEnabled();
+  if (bleState.IsUpdated() || bleRadioEnabled.IsUpdated()) {
+    if (!bleRadioEnabled.Get()) {
+      lv_label_set_text_static(connectState, "status: disabled");
+    } else {
+      if (bleState.Get()) {
+        lv_label_set_text_static(connectState, "status: connected");
+      } else {
+        lv_label_set_text_static(connectState, "status: disconnected");
+      }
+    }
+  }
+
+  notificationState = notificationManager.AreNewNotificationsAvailable();
+  if (notificationState.IsUpdated()) {
+    if (notificationState.Get()) {
+      lv_label_set_text_static(notificationIcon, "you have mail.");
+    } else {
+      lv_label_set_text_static(notificationIcon, "");
+    }
+  }
+
+  currentDateTime = std::chrono::time_point_cast<std::chrono::seconds>(dateTimeController.CurrentDateTime());
+  if (currentDateTime.IsUpdated()) {
+    uint8_t hour = dateTimeController.Hours();
+    uint8_t minute = dateTimeController.Minutes();
+    uint8_t second = dateTimeController.Seconds();
+
+    if (settingsController.GetClockType() == Controllers::Settings::ClockType::H12) {
+      char ampmChar[3] = "am";
+      if (hour == 0) {
+        hour = 12;
+      } else if (hour == 12) {
+        ampmChar[0] = 'p';
+      } else if (hour > 12) {
+        hour = hour - 12;
+        ampmChar[0] = 'p';
+      }
+      lv_label_set_text_fmt(label_time, "time: %s", hour, minute, second, ampmChar);
+    } else {
+      lv_label_set_text_fmt(label_time, "time: %02d:%02d:%02d", hour, minute, second);
+    }
+
+    currentDate = std::chrono::time_point_cast<days>(currentDateTime.Get());
+    if (currentDate.IsUpdated()) {
+      uint16_t year = dateTimeController.Year();
+      Controllers::DateTime::Months month = dateTimeController.Month();
+      uint8_t day = dateTimeController.Day();
+      lv_label_set_text_fmt(label_date, "date: %04d-%02d-%02d", short(year), char(month), char(day));
+    }
+  }
+
+  lv_label_set_text_fmt(weekdayValue, "weekdday: %s %d", dateTimeController.DayOfWeekShortToStringLow(dateTimeController.DayOfWeek()), dateTimeController.DayOfWeek());
+  
+  lv_label_set_text_fmt(monthValue, "month: %s %d", dateTimeController.MonthShortToStringLow(dateTimeController.Month()), dateTimeController.Month());
+
+  heartbeat = heartRateController.HeartRate();
+  heartbeatRunning = heartRateController.State() != Controllers::HeartRateController::States::Stopped;
+  if (heartbeat.IsUpdated() || heartbeatRunning.IsUpdated()) {
+    if (heartbeatRunning.Get()) {
+      lv_label_set_text_fmt(heartbeatValue, "heartbeat: %d bpm", heartbeat.Get());
+    } else {
+      lv_label_set_text_static(heartbeatValue, "heartbeat: ---");
+    }
+  }
+
+  stepCount = motionController.NbSteps();
+  if (stepCount.IsUpdated()) {
+    lv_label_set_text_fmt(stepValue, "steps: %lu", stepCount.Get());
+  }
+}
diff --git a/src/displayapp/screens/WatchFaceTerminalCustom.h b/src/displayapp/screens/WatchFaceTerminalCustom.h
new file mode 100644
index 00000000..a95be7f3
--- /dev/null
+++ b/src/displayapp/screens/WatchFaceTerminalCustom.h
@@ -0,0 +1,95 @@
+#pragma once
+
+#include <lvgl/src/lv_core/lv_obj.h>
+#include <chrono>
+#include <cstdint>
+#include <memory>
+#include <displayapp/Controllers.h>
+#include "displayapp/screens/Screen.h"
+#include "components/datetime/DateTimeController.h"
+#include "utility/DirtyValue.h"
+
+namespace Pinetime {
+  namespace Controllers {
+    class Settings;
+    class Battery;
+    class Ble;
+    class NotificationManager;
+    class HeartRateController;
+    class MotionController;
+  }
+
+  namespace Applications {
+    namespace Screens {
+
+      class WatchFaceTerminalCustom : public Screen {
+      public:
+        WatchFaceTerminalCustom(Controllers::DateTime& dateTimeController,
+                          const Controllers::Battery& batteryController,
+                          const Controllers::Ble& bleController,
+                          Controllers::NotificationManager& notificationManager,
+                          Controllers::Settings& settingsController,
+                          Controllers::HeartRateController& heartRateController,
+                          Controllers::MotionController& motionController);
+        ~WatchFaceTerminalCustom() override;
+
+        void Refresh() override;
+
+      private:
+        Utility::DirtyValue<int> batteryPercentRemaining {};
+        Utility::DirtyValue<bool> powerPresent {};
+        Utility::DirtyValue<bool> bleState {};
+        Utility::DirtyValue<bool> bleRadioEnabled {};
+        Utility::DirtyValue<std::chrono::time_point<std::chrono::system_clock, std::chrono::seconds>> currentDateTime {};
+        Utility::DirtyValue<uint32_t> stepCount {};
+        Utility::DirtyValue<uint8_t> heartbeat {};
+        Utility::DirtyValue<bool> heartbeatRunning {};
+        Utility::DirtyValue<bool> notificationState {};
+        using days = std::chrono::duration<int32_t, std::ratio<86400>>; // TODO: days is standard in c++20
+        Utility::DirtyValue<std::chrono::time_point<std::chrono::system_clock, days>> currentDate;
+
+        lv_obj_t* label_time;
+        lv_obj_t* label_date;
+        lv_obj_t* label_prompt_1;
+        lv_obj_t* label_prompt_2;
+        lv_obj_t* batteryValue;
+        lv_obj_t* weekdayValue;
+        lv_obj_t* monthValue;
+        lv_obj_t* heartbeatValue;
+        lv_obj_t* stepValue;
+        lv_obj_t* notificationIcon;
+        lv_obj_t* connectState;
+
+        Controllers::DateTime& dateTimeController;
+        const Controllers::Battery& batteryController;
+        const Controllers::Ble& bleController;
+        Controllers::NotificationManager& notificationManager;
+        Controllers::Settings& settingsController;
+        Controllers::HeartRateController& heartRateController;
+        Controllers::MotionController& motionController;
+
+        lv_task_t* taskRefresh;
+      };
+    }
+
+    template <>
+    struct WatchFaceTraits<WatchFace::TerminalCustom> {
+      static constexpr WatchFace watchFace = WatchFace::TerminalCustom;
+      static constexpr const char* name = "TerminalCustom";
+
+      static Screens::Screen* Create(AppControllers& controllers) {
+        return new Screens::WatchFaceTerminalCustom(controllers.dateTimeController,
+                                              controllers.batteryController,
+                                              controllers.bleController,
+                                              controllers.notificationManager,
+                                              controllers.settingsController,
+                                              controllers.heartRateController,
+                                              controllers.motionController);
+      };
+
+      static bool IsAvailable(Pinetime::Controllers::FS& /*filesystem*/) {
+        return true;
+      }
+    };
+  }
+}
diff --git a/src/displayapp/screens/settings/SettingWatchFace.h b/src/displayapp/screens/settings/SettingWatchFace.h
index 9edc1f7a..00f08661 100644
--- a/src/displayapp/screens/settings/SettingWatchFace.h
+++ b/src/displayapp/screens/settings/SettingWatchFace.h
@@ -11,6 +11,7 @@
 #include "displayapp/screens/CheckboxList.h"
 #include "displayapp/screens/WatchFaceInfineat.h"
 #include "displayapp/screens/WatchFaceCasioStyleG7710.h"
+#include "displayapp/screens/WatchFaceTerminalCustom.h"
 
 namespace Pinetime {
 
