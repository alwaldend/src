diff --git a/perl/cpan/extensions.bzl b/perl/cpan/extensions.bzl
index bb4eaab..4e21e9e 100644
--- a/perl/cpan/extensions.bzl
+++ b/perl/cpan/extensions.bzl
@@ -13,6 +13,14 @@ _install_tag = tag_class(
             doc = "The name of the module to create",
             mandatory = True,
         ),
+        "bins": attr.string_list_dict(
+            doc = "Perl binary targets. Keys are packages, values are lists of bin labels.",
+            default = {},
+        ),
+        "add_deps": attr.string_list_dict(
+            doc = "Add dependencies to perl_* targets. Keys are packages, values are packages.",
+            default = {},
+        ),
     },
 )
 
diff --git a/perl/cpan/private/carton.bzl b/perl/cpan/private/carton.bzl
index abcfcc4..599a61d 100644
--- a/perl/cpan/private/carton.bzl
+++ b/perl/cpan/private/carton.bzl
@@ -6,6 +6,7 @@ _HUB_BUILD_FILE = """\
 load("@rules_perl//perl:perl_library.bzl", "perl_library")
 
 DEPENDENCIES = {dependencies}
+BINS = {bins}
 
 perl_library(
     name = "{name}",
@@ -25,6 +26,17 @@ perl_library(
     )
     for dep in DEPENDENCIES
 ]
+
+[
+    alias(
+        name = "{{}}_{{}}".format(dep, bin.replace("/", "_").replace(":", "")),
+        actual = "@{name}__{{}}//:{{}}_{{}}".format(dep, dep, bin.replace("/", "_").replace(":", "")),
+        visibility = ["//visibility:public"],
+    )
+    for dep, bins in BINS.items()
+    for bin in bins
+]
+
 """
 
 def _cpan_hub_impl(repository_ctx):
@@ -35,6 +47,7 @@ def _cpan_hub_impl(repository_ctx):
     repository_ctx.file("BUILD.bazel", _HUB_BUILD_FILE.format(
         name = repository_ctx.attr.hub_name,
         dependencies = json.encode_indent(repository_ctx.attr.modules, indent = " " * 4),
+        bins = json.encode_indent(repository_ctx.attr.bins, indent = " " * 4),
     ))
 
 cpan_hub = repository_rule(
@@ -49,6 +62,10 @@ cpan_hub = repository_rule(
             doc = "Dependencies to add to the hub.",
             mandatory = True,
         ),
+        "bins": attr.string_list_dict(
+            doc = "Perl binary targets. Keys are packages, values are lists of bin paths.",
+            default = {},
+        ),
     },
 )
 
@@ -56,8 +73,10 @@ _CPAN_MODULE_BUILD_FILE = """\
 \"\"\"Autogenerated by rules_perl.\"\"\"
 
 load("@rules_perl//perl:perl_library.bzl", "perl_library")
+load("@rules_perl//perl:perl_binary.bzl", "perl_binary")
 
 DEPENDENCIES = {dependencies}
+BINS = {bins}
 
 perl_library(
     name = "{name}",
@@ -79,6 +98,16 @@ perl_library(
     visibility = ["//visibility:public"],
 )
 
+[
+    perl_binary(
+        name = "{name}_{{}}".format(bin.replace("/", "_").replace(":", "")),
+        main = bin,
+        deps = [":{name}"],
+        visibility = ["//visibility:public"],
+    )
+    for bin in BINS
+]
+
 alias(
     name = "{repo_name}",
     actual = "{name}",
@@ -127,6 +156,7 @@ def _cpan_distribution_archive_impl(repository_ctx):
         dependencies = json.encode_indent(repository_ctx.attr.dependencies, indent = " " * 4),
         output = "{}/".format(output).lstrip("/"),
         includes = json.encode(includes),
+        bins = json.encode_indent(repository_ctx.attr.bins, indent = " " * 4),
     ))
 
     return {
@@ -137,6 +167,7 @@ def _cpan_distribution_archive_impl(repository_ctx):
         "sha256": results.sha256,
         "strip_prefix": repository_ctx.attr.strip_prefix,
         "urls": repository_ctx.attr.urls,
+        "bins": repository_ctx.attr.bins,
     }
 
 cpan_distribution_archive = repository_rule(
@@ -165,6 +196,10 @@ cpan_distribution_archive = repository_rule(
             doc = "List of mirror URLs referencing the same file to download.",
             mandatory = True,
         ),
+        "bins": attr.string_list(
+            doc = "List of paths to create perl_binary targets for.",
+            default = [],
+        ),
     },
 )
 
@@ -191,13 +226,15 @@ def install(*, module_ctx, attrs):
             sha256 = lockfile[module]["sha256"],
             hub_name = attrs.name,
             distribution = module,
-            dependencies = lockfile[module]["dependencies"],
+            dependencies = lockfile[module]["dependencies"] + attrs.add_deps.get(module, []),
+            bins = attrs.bins.get(module, []),
         )
 
     cpan_hub(
         name = attrs.name,
         hub_name = attrs.name,
         modules = lockfile.keys(),
+        bins = attrs.bins,
     )
 
     return attrs.name
